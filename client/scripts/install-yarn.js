/**
 * Script para instalar dependencias en todos los m√≥dulos del cliente OFICRI usando Yarn
 * Espec√≠ficamente dise√±ado para manejar referencias workspace:*
 */

const { execSync } = require('child_process');
const path = require('path');
const fs = require('fs');
const chalk = require('chalk');

// Verificar que Yarn est√° instalado
try {
  execSync('yarn --version', { stdio: 'pipe' });
  console.log(chalk.green('‚úÖ Yarn detectado correctamente'));
} catch (error) {
  console.log(chalk.red('‚ùå Yarn no est√° instalado. Instalando Yarn globalmente...'));
  try {
    execSync('npm install -g yarn', { stdio: 'inherit' });
    console.log(chalk.green('‚úÖ Yarn instalado correctamente'));
  } catch (error) {
    console.error(chalk.red('‚ùå Error instalando Yarn:'));
    console.error(chalk.red(error.message));
    process.exit(1);
  }
}

console.log(chalk.blue('üì¶ OFICRI - Instalaci√≥n de dependencias con Yarn'));
console.log(chalk.yellow('‚è≥ Iniciando instalaci√≥n en el proyecto principal...'));

try {
  // Instalar dependencias en la ra√≠z del proyecto (nivel client)
  const rootPath = path.join(__dirname, '..');
  
  // Asegurarse de que se detecten los workspaces en package.json
  const packageJsonPath = path.join(rootPath, 'package.json');
  let packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  
  if (!packageJson.workspaces || packageJson.workspaces.length === 0) {
    console.log(chalk.yellow('‚ö†Ô∏è No se detectaron workspaces en package.json. A√±adiendo configuraci√≥n...'));
    
    // A√±adir configuraci√≥n de workspaces si no existe
    packageJson.workspaces = [
      "shell",
      "auth",
      "documents",
      "mesa-partes",
      "users",
      "dashboard",
      "areas",
      "security",
      "shared",
      "main"
    ];
    
    // Guardar actualizaci√≥n
    fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
    console.log(chalk.green('‚úÖ Configuraci√≥n de workspaces a√±adida'));
  }
  
  // Si existe package-lock.json, eliminarlo (puede causar conflictos con Yarn)
  const packageLockPath = path.join(rootPath, 'package-lock.json');
  if (fs.existsSync(packageLockPath)) {
    console.log(chalk.yellow('‚ö†Ô∏è Eliminando package-lock.json para evitar conflictos...'));
    fs.unlinkSync(packageLockPath);
  }
  
  // Ejecutar yarn install (maneja autom√°ticamente workspaces)
  console.log(chalk.cyan('\n‚û°Ô∏è Ejecutando yarn install...'));
  execSync('yarn install', { 
    cwd: rootPath, 
    stdio: 'inherit',
    env: { 
      ...process.env,
      // Configurar para que acepte node-gyp y otras dependencias nativas
      ADBLOCK: '0',
      DISABLE_NOTIFIER: 'true'
    }
  });
  
  console.log(chalk.green('\n‚úÖ Instalaci√≥n completada exitosamente!'));
  console.log(chalk.blue('üìã Los m√≥dulos ahora deber√≠an poder resolverse entre s√≠.'));
  console.log(chalk.yellow('üí° Usa "npm run dev:areas" para iniciar el m√≥dulo de √°reas, o "npm run dev" para iniciar todos los m√≥dulos.'));
  
} catch (error) {
  console.error(chalk.red('\n‚ùå Error durante la instalaci√≥n:'));
  console.error(chalk.red(error.message));
  
  // Proporcionar sugerencias de soluci√≥n
  console.log(chalk.yellow('\nüí° Sugerencias para resolver el problema:'));
  console.log(chalk.yellow('1. Intenta ejecutar "yarn" manualmente en la carpeta client'));
  console.log(chalk.yellow('2. Si hay errores espec√≠ficos con alg√∫n m√≥dulo, revisa su package.json'));
  console.log(chalk.yellow('3. Para iniciar solo el m√≥dulo de √°reas sin depender de otros m√≥dulos, usa "npm run dev:areas"'));
  
  process.exit(1);
} 