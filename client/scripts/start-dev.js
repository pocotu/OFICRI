/**
 * Script para iniciar todos los servidores de desarrollo del cliente OFICRI
 * Maneja correctamente los micro frontends incluso con referencias workspace
 */

const concurrently = require('concurrently');
const path = require('path');
const fs = require('fs');
const chalk = require('chalk');

// Configuraci√≥n de los m√≥dulos a iniciar con puertos espec√≠ficos - shell al final
const modules = [
  // Nivel 1: M√≥dulos base
  { path: './shared', name: 'SHARED', color: 'cyan', port: 5001, level: 1 },  
  
  // Nivel 2: M√≥dulos funcionales
  { path: './areas', name: 'AREAS', color: 'green', port: 5006, level: 2 },
  { path: './auth', name: 'AUTH', color: 'magenta', port: 5002, level: 2 },
  { path: './documents', name: 'DOCS', color: 'yellow', port: 5003, level: 2 },
  { path: './mesa-partes', name: 'MESA', color: 'red', port: 5004, level: 2 },
  { path: './users', name: 'USERS', color: 'white', port: 5005, level: 2 },
  { path: './dashboard', name: 'DASHBOARD', color: 'gray', port: 5007, level: 2 },
  { path: './security', name: 'SECURITY', color: 'blue', port: 5008, level: 2 },
  
  // Nivel 3: Shell (√∫ltimo para que los dem√°s m√≥dulos est√©n disponibles)
  { path: './shell', name: 'SHELL', color: 'blue', port: 5000, level: 3 }
];

console.log(chalk.blue('üöÄ OFICRI - Iniciando servidores de desarrollo'));

// Filtrar los m√≥dulos que tienen script dev en su package.json
const validModules = modules.filter(module => {
  const packagePath = path.join(__dirname, '..', module.path, 'package.json');
  
  if (!fs.existsSync(packagePath)) {
    console.log(chalk.yellow(`‚ö†Ô∏è No existe package.json en ${module.path}, omitiendo...`));
    return false;
  }
  
  try {
    const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    if (!packageJson.scripts || !packageJson.scripts.dev) {
      console.log(chalk.yellow(`‚ö†Ô∏è No existe script 'dev' en ${module.path}, omitiendo...`));
      return false;
    }
    return true;
  } catch (error) {
    console.log(chalk.red(`‚ùå Error leyendo package.json en ${module.path}, omitiendo...`));
    return false;
  }
});

if (validModules.length === 0) {
  console.log(chalk.red('‚ùå No se encontraron m√≥dulos v√°lidos para iniciar.'));
  process.exit(1);
}

console.log(chalk.green(`‚úÖ Se iniciar√°n ${validModules.length} m√≥dulos en puertos separados.`));

// Preguntar al usuario si desea iniciar todos los m√≥dulos o solo algunos espec√≠ficos
console.log(chalk.yellow('üìã ¬øQu√© m√≥dulos deseas iniciar?'));
console.log(chalk.yellow('   1. Solo el m√≥dulo de √°reas (recomendado para desarrollo de √°reas)'));
console.log(chalk.yellow('   2. M√≥dulos independientes (sin Shell)'));
console.log(chalk.yellow('   3. Todos los m√≥dulos (puede causar errores iniciales)'));

// Por defecto, iniciar solo el m√≥dulo de √°reas (opci√≥n 1)
const option = 1;

// Filtrar m√≥dulos seg√∫n la opci√≥n elegida
let modulesToStart = [];
if (option === 1) {
  // Solo el m√≥dulo de √°reas
  modulesToStart = validModules.filter(module => module.name === 'AREAS');
  console.log(chalk.green(`‚úÖ Iniciando solo el m√≥dulo de AREAS en puerto ${modulesToStart[0].port}`));
} else if (option === 2) {
  // Todos los m√≥dulos excepto Shell
  modulesToStart = validModules.filter(module => module.level !== 3);
  console.log(chalk.green(`‚úÖ Iniciando m√≥dulos independientes (sin Shell)`));
} else {
  // Todos los m√≥dulos
  modulesToStart = validModules;
  console.log(chalk.green(`‚úÖ Iniciando todos los m√≥dulos (incluido Shell)`));
}

// Comandos para cada m√≥dulo con su puerto espec√≠fico
const commands = modulesToStart.map(module => {
  // Determinar el comando correcto seg√∫n el tipo de proyecto (Vite, Vue CLI, React, etc.)
  let command = '';
  
  try {
    const packagePath = path.join(__dirname, '..', module.path, 'package.json');
    const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    
    // Comprobar si es un proyecto Vite (com√∫n en proyectos Vue 3)
    const hasVite = packageJson.devDependencies && 
                   (packageJson.devDependencies.vite || 
                    packageJson.dependencies && packageJson.dependencies.vite);
    
    if (hasVite) {
      command = `cd ${module.path} && vite --port ${module.port}`;
    } else {
      // Si no es Vite, usar el script dev est√°ndar con variable de entorno PORT
      command = `cd ${module.path} && cross-env PORT=${module.port} npm run dev`;
    }
  } catch (error) {
    // Si hay error, usar el script dev est√°ndar
    command = `cd ${module.path} && npm run dev`;
  }
  
  return {
    command,
    name: module.name,
    prefixColor: module.color
  };
});

// Iniciar todos los servidores concurrentemente
console.log(chalk.yellow('‚è≥ Iniciando servidores...'));
console.log(chalk.yellow('üìã Lista de m√≥dulos y puertos:'));

modulesToStart.forEach(module => {
  console.log(chalk.yellow(`   ‚Üí ${module.name}: http://localhost:${module.port}`));
});

// Mensaje con instrucciones para desarrollo
console.log(chalk.blue('\nüí° Instrucciones para desarrollo:'));
console.log(chalk.cyan('   1. Para trabajar solo con el m√≥dulo de √°reas: npm run dev:areas'));
console.log(chalk.cyan('   2. Para iniciar el shell independientemente: npm run dev:shell'));
console.log(chalk.cyan('   3. Para restaurar los package.json: npm run dev:reset'));

try {
  concurrently(commands, {
    prefix: '{name} |',
    timestampFormat: 'HH:mm:ss',
    prefixColors: 'auto',
    killOthers: ['failure'],
    restartTries: 3
  }).result.then(
    () => {
      console.log(chalk.green('\n‚úÖ Todos los servidores finalizaron correctamente.'));
    },
    error => {
      console.log(chalk.red('\n‚ùå Uno o m√°s servidores terminaron con error:'));
      console.error(chalk.red(error.message));
      process.exit(1);
    }
  );
} catch (error) {
  console.error(chalk.red('\n‚ùå Error al iniciar servidores:'));
  console.error(chalk.red(error.message));
  process.exit(1);
} 