<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="825" failures="0" errors="0" time="7.265">
  <testsuite name="Area Routes" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:20" time="0.954" tests="1">
    <testcase classname="Area Routes" name="debe configurar ruta GET / para obtener todas las áreas" time="0.027">
    </testcase>
  </testsuite>
  <testsuite name="Audit Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:20" time="0.973" tests="12">
    <testcase classname="Audit Middleware AUDIT_TYPES" name="debe tener todos los tipos de auditoría definidos" time="0.025">
    </testcase>
    <testcase classname="Audit Middleware auditLog" name="debe registrar la acción y llamar a next" time="0.007">
    </testcase>
    <testcase classname="Audit Middleware auditLog" name="debe manejar el caso cuando req.user es null" time="0.001">
    </testcase>
    <testcase classname="Audit Middleware auditLog" name="debe capturar errores y continuar" time="0.002">
    </testcase>
    <testcase classname="Audit Middleware failedAccessAudit" name="debe registrar el intento fallido y llamar a next" time="0.003">
    </testcase>
    <testcase classname="Audit Middleware failedAccessAudit" name="debe capturar errores y continuar" time="0.001">
    </testcase>
    <testcase classname="Audit Middleware permissionChangeAudit" name="debe registrar el cambio de permisos y llamar a next" time="0.001">
    </testcase>
    <testcase classname="Audit Middleware permissionChangeAudit" name="debe manejar el caso cuando req.user es null" time="0.001">
    </testcase>
    <testcase classname="Audit Middleware permissionChangeAudit" name="debe capturar errores y continuar" time="0.002">
    </testcase>
    <testcase classname="Audit Middleware roleChangeAudit" name="debe registrar el cambio de rol y llamar a next" time="0.001">
    </testcase>
    <testcase classname="Audit Middleware roleChangeAudit" name="debe manejar el caso cuando req.user es null" time="0.004">
    </testcase>
    <testcase classname="Audit Middleware roleChangeAudit" name="debe capturar errores y continuar" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Auth Routes" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:20" time="0.933" tests="1">
    <testcase classname="Auth Routes" name="debe configurar ruta POST /login con validación de esquema" time="0.035">
    </testcase>
  </testsuite>
  <testsuite name="Area Controller" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:20" time="1.022" tests="6">
    <testcase classname="Area Controller getAllAreas" name="should get all areas with pagination and return 200 status" time="0.02">
    </testcase>
    <testcase classname="Area Controller getAllAreas" name="should handle database errors and return 500 status" time="0.037">
    </testcase>
    <testcase classname="Area Controller getAreaById" name="should get an area by id and return 200 status" time="0.004">
    </testcase>
    <testcase classname="Area Controller getAreaById" name="should return 404 if area not found" time="0.005">
    </testcase>
    <testcase classname="Area Controller getAreaById" name="should return 400 for invalid id" time="0.002">
    </testcase>
    <testcase classname="Area Controller getAreaById" name="should handle database errors and return 500 status" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Cache Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:21" time="0.129" tests="11">
    <testcase classname="Cache Middleware cacheMiddleware" name="debe pasar sin caché para métodos que no son GET" time="0.003">
    </testcase>
    <testcase classname="Cache Middleware cacheMiddleware" name="debe devolver respuesta en caché cuando existe" time="0.002">
    </testcase>
    <testcase classname="Cache Middleware cacheMiddleware" name="debe configurar caché y continuar cuando no hay cache" time="0.002">
    </testcase>
    <testcase classname="Cache Middleware invalidateCache" name="debe eliminar entradas que coinciden con el patrón" time="0.002">
    </testcase>
    <testcase classname="Cache Middleware invalidateCache" name="debe manejar errores al invalidar caché" time="0.001">
    </testcase>
    <testcase classname="Cache Middleware invalidateCache" name="no debe hacer nada si no hay coincidencias" time="0">
    </testcase>
    <testcase classname="Cache Middleware clearCache" name="debe limpiar toda la caché" time="0.001">
    </testcase>
    <testcase classname="Cache Middleware clearCache" name="debe manejar errores al limpiar caché" time="0.001">
    </testcase>
    <testcase classname="Cache Middleware parameterizedCache" name="debe usar TTL personalizado" time="0.005">
    </testcase>
    <testcase classname="Cache Middleware parameterizedCache" name="debe usar parámetros de consulta para generar clave de caché" time="0.002">
    </testcase>
    <testcase classname="Cache Middleware parameterizedCache" name="debe pasar sin caché para métodos que no son GET" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Async Handler Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:20" time="1.282" tests="15">
    <testcase classname="Async Handler Middleware asyncHandler" name="debe pasar el control a la siguiente función cuando no hay errores" time="0.019">
    </testcase>
    <testcase classname="Async Handler Middleware asyncHandler" name="debe manejar errores internos del servidor" time="0.025">
    </testcase>
    <testcase classname="Async Handler Middleware asyncHandler" name="debe mostrar el mensaje de error en modo desarrollo" time="0.003">
    </testcase>
    <testcase classname="Async Handler Middleware asyncHandler" name="debe manejar errores de validación" time="0.002">
    </testcase>
    <testcase classname="Async Handler Middleware asyncHandler" name="debe manejar errores de autenticación" time="0.003">
    </testcase>
    <testcase classname="Async Handler Middleware asyncHandler" name="debe manejar errores de acceso denegado" time="0.003">
    </testcase>
    <testcase classname="Async Handler Middleware asyncHandler" name="debe manejar errores de recurso no encontrado" time="0.002">
    </testcase>
    <testcase classname="Async Handler Middleware asyncHandler" name="debe manejar errores de conflicto" time="0.002">
    </testcase>
    <testcase classname="Async Handler Middleware asyncHandlers" name="debe envolver múltiples funciones" time="0.002">
    </testcase>
    <testcase classname="Async Handler Middleware dbErrorHandler" name="debe manejar errores de duplicidad" time="0.003">
    </testcase>
    <testcase classname="Async Handler Middleware dbErrorHandler" name="debe manejar errores de referencia inexistente" time="0.002">
    </testcase>
    <testcase classname="Async Handler Middleware dbErrorHandler" name="debe manejar errores de campo nulo" time="0.003">
    </testcase>
    <testcase classname="Async Handler Middleware dbErrorHandler" name="debe pasar otros errores a la siguiente función" time="0.001">
    </testcase>
    <testcase classname="Async Handler Middleware joiErrorHandler" name="debe manejar errores de validación de Joi" time="0.001">
    </testcase>
    <testcase classname="Async Handler Middleware joiErrorHandler" name="debe pasar otros errores a la siguiente función" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="BaseModel" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:21" time="0.262" tests="45">
    <testcase classname="BaseModel Constructor" name="debe configurar correctamente las propiedades del modelo" time="0.007">
    </testcase>
    <testcase classname="BaseModel Constructor" name="debe usar valores por defecto cuando no se proporcionan" time="0.002">
    </testcase>
    <testcase classname="BaseModel findById" name="debe generar la consulta SQL correcta" time="0.002">
    </testcase>
    <testcase classname="BaseModel findById" name="debe incluir registros eliminados si se especifica en las opciones" time="0.001">
    </testcase>
    <testcase classname="BaseModel findById" name="debe devolver null si no se encuentra el registro" time="0.001">
    </testcase>
    <testcase classname="BaseModel findById" name="debe permitir seleccionar campos específicos" time="0">
    </testcase>
    <testcase classname="BaseModel findById" name="debe manejar errores y registrarlos" time="0.009">
    </testcase>
    <testcase classname="BaseModel findAll" name="debe generar la consulta SQL correcta con criterios" time="0.002">
    </testcase>
    <testcase classname="BaseModel findAll" name="debe aplicar correctamente limit y offset" time="0.002">
    </testcase>
    <testcase classname="BaseModel findAll" name="debe aplicar correctamente el ordenamiento" time="0.001">
    </testcase>
    <testcase classname="BaseModel findAll" name="debe omitir condiciones WHERE si no hay criterios ni softDelete" time="0.001">
    </testcase>
    <testcase classname="BaseModel findAll" name="debe incluir sólo criterios necesarios" time="0.001">
    </testcase>
    <testcase classname="BaseModel findAll" name="debe manejar errores y registrarlos" time="0.001">
    </testcase>
    <testcase classname="BaseModel create" name="debe insertar un nuevo registro y devolverlo" time="0.003">
    </testcase>
    <testcase classname="BaseModel create" name="debe retornar null si no hay insertId" time="0">
    </testcase>
    <testcase classname="BaseModel create" name="debe validar campos requeridos antes de insertar" time="0.025">
    </testcase>
    <testcase classname="BaseModel create" name="debe validar campos únicos antes de insertar" time="0.001">
    </testcase>
    <testcase classname="BaseModel create" name="debe manejar errores y registrarlos" time="0.002">
    </testcase>
    <testcase classname="BaseModel update" name="debe actualizar un registro existente y devolverlo" time="0.001">
    </testcase>
    <testcase classname="BaseModel update" name="debe lanzar error si el registro no existe" time="0.002">
    </testcase>
    <testcase classname="BaseModel update" name="debe validar campos únicos antes de actualizar" time="0.002">
    </testcase>
    <testcase classname="BaseModel update" name="debe devolver el registro sin cambios si no hay datos para actualizar" time="0.001">
    </testcase>
    <testcase classname="BaseModel update" name="debe manejar errores y registrarlos" time="0.002">
    </testcase>
    <testcase classname="BaseModel delete" name="debe eliminar lógicamente un registro con softDelete habilitado" time="0.001">
    </testcase>
    <testcase classname="BaseModel delete" name="debe eliminar físicamente un registro sin softDelete" time="0">
    </testcase>
    <testcase classname="BaseModel delete" name="debe lanzar error si el registro no existe" time="0.009">
    </testcase>
    <testcase classname="BaseModel delete" name="debe manejar errores y registrarlos" time="0.003">
    </testcase>
    <testcase classname="BaseModel count" name="debe contar registros con criterios específicos" time="0.001">
    </testcase>
    <testcase classname="BaseModel count" name="debe contar todos los registros activos sin criterios" time="0">
    </testcase>
    <testcase classname="BaseModel count" name="debe incluir registros eliminados si se especifica en las opciones" time="0.001">
    </testcase>
    <testcase classname="BaseModel count" name="debe manejar errores y registrarlos" time="0.001">
    </testcase>
    <testcase classname="BaseModel _sanitizeInput" name="debe eliminar campos sensibles de los datos de entrada" time="0.001">
    </testcase>
    <testcase classname="BaseModel _sanitizeInput" name="debe mantener los datos originales si no hay campos sensibles" time="0">
    </testcase>
    <testcase classname="BaseModel _sanitizeOutput" name="debe eliminar campos sensibles de los datos de salida" time="0.001">
    </testcase>
    <testcase classname="BaseModel _sanitizeOutput" name="debe mantener los datos originales si no hay campos sensibles" time="0.001">
    </testcase>
    <testcase classname="BaseModel _sanitizeLog" name="debe reemplazar campos sensibles con [REDACTED]" time="0">
    </testcase>
    <testcase classname="BaseModel _sanitizeLog" name="debe mantener los datos originales si no hay campos sensibles" time="0.001">
    </testcase>
    <testcase classname="BaseModel _validateRequiredFields" name="debe lanzar error si faltan campos requeridos" time="0.003">
    </testcase>
    <testcase classname="BaseModel _validateRequiredFields" name="debe pasar la validación con todos los campos requeridos" time="0.001">
    </testcase>
    <testcase classname="BaseModel _validateRequiredFields" name="debe fallar la validación si un campo requerido está vacío" time="0.001">
    </testcase>
    <testcase classname="BaseModel _validateUniqueFields" name="debe validar campos únicos correctamente" time="0.001">
    </testcase>
    <testcase classname="BaseModel _validateUniqueFields" name="debe excluir el ID actual en la validación" time="0">
    </testcase>
    <testcase classname="BaseModel _validateUniqueFields" name="debe lanzar error si existe un valor duplicado" time="0.001">
    </testcase>
    <testcase classname="BaseModel _validateUniqueFields" name="debe ignorar campos que no están en uniqueFields" time="0">
    </testcase>
    <testcase classname="BaseModel _validateUniqueFields" name="debe ignorar campos undefined" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Auth Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:21" time="0.359" tests="39">
    <testcase classname="Auth Middleware authenticate" name="debe permitir acceso en modo de prueba sin token" time="0.003">
    </testcase>
    <testcase classname="Auth Middleware authenticate" name="debe rechazar peticiones sin token en modo producción" time="0.002">
    </testcase>
    <testcase classname="Auth Middleware authenticate" name="debe aceptar peticiones con token válido" time="0.002">
    </testcase>
    <testcase classname="Auth Middleware authenticate" name="debe rechazar peticiones con token inválido" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware verifyToken" name="debe rechazar peticiones sin token" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware verifyToken" name="debe rechazar peticiones con formato de token incorrecto" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware verifyToken" name="debe aceptar peticiones con token válido" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware checkRole" name="debe rechazar si el usuario no está autenticado" time="0.002">
    </testcase>
    <testcase classname="Auth Middleware checkRole" name="debe rechazar si el usuario no tiene el rol requerido" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware checkRole" name="debe permitir acceso si el usuario tiene el rol requerido" time="0">
    </testcase>
    <testcase classname="Auth Middleware checkRole" name="debe manejar errores durante la verificación" time="0.002">
    </testcase>
    <testcase classname="Auth Middleware checkResourceOwnership" name="debe rechazar si el usuario no está autenticado" time="0.003">
    </testcase>
    <testcase classname="Auth Middleware checkResourceOwnership" name="debe rechazar si el recurso no existe" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware checkResourceOwnership" name="debe permitir acceso a administradores sin importar la propiedad" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware checkResourceOwnership" name="debe rechazar acceso a usuarios que no son propietarios" time="0.006">
    </testcase>
    <testcase classname="Auth Middleware checkResourceOwnership" name="debe permitir acceso a usuarios propietarios" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware validatePermissions (Bit-based)" name="debe rechazar acceso si el usuario no está autenticado" time="0.002">
    </testcase>
    <testcase classname="Auth Middleware validatePermissions (Bit-based)" name="debe permitir acceso a administradores sin verificar bits" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware validatePermissions (Bit-based)" name="debe permitir acceso a usuarios con permisos totales" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware validatePermissions (Bit-based)" name="debe permitir acceso si el usuario tiene el bit requerido" time="0.002">
    </testcase>
    <testcase classname="Auth Middleware validatePermissions (Bit-based)" name="debe rechazar acceso si el usuario no tiene el bit requerido" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware validatePermissions (Bit-based)" name="debe manejar errores durante la verificación de bits" time="0.047">
    </testcase>
    <testcase classname="Auth Middleware checkPermissions" name="debe rechazar si el usuario no está autenticado" time="0.002">
    </testcase>
    <testcase classname="Auth Middleware checkPermissions" name="debe rechazar si el usuario no tiene todos los permisos requeridos" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware checkPermissions" name="debe permitir acceso si el usuario tiene todos los permisos requeridos" time="0.007">
    </testcase>
    <testcase classname="Auth Middleware checkPermissions" name="debe permitir acceso para un solo permiso requerido" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware checkPermissions" name="debe manejar errores durante la verificación de permisos" time="0.002">
    </testcase>
    <testcase classname="Auth Middleware authorize" name="debe permitir acceso en modo de prueba sin verificar rol" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware authorize" name="debe rechazar si el usuario no está autenticado" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware authorize" name="debe rechazar si el usuario no tiene el rol requerido" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware authorize" name="debe permitir acceso a administradores para cualquier rol" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware authorize" name="debe permitir acceso si el usuario tiene el rol requerido" time="0.002">
    </testcase>
    <testcase classname="Auth Middleware authMiddleware" name="debe permitir acceso a rutas públicas sin token" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware authMiddleware" name="debe permitir acceso a rutas de salud sin token" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware authMiddleware" name="debe rechazar peticiones sin token para rutas protegidas" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware authMiddleware" name="debe rechazar peticiones con formato de token incorrecto" time="0.005">
    </testcase>
    <testcase classname="Auth Middleware authMiddleware" name="debe aceptar peticiones con token válido" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware authMiddleware" name="debe aceptar peticiones a rutas protegidas en modo test sin token" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware authMiddleware" name="debe rechazar peticiones con token inválido" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Auth/index Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:20" time="1.399" tests="7">
    <testcase classname="Auth/index Middleware verifyToken" name="debe rechazar peticiones sin token" time="0.019">
    </testcase>
    <testcase classname="Auth/index Middleware verifyToken" name="debe rechazar peticiones con formato de token incorrecto" time="0.002">
    </testcase>
    <testcase classname="Auth/index Middleware verifyToken" name="debe aceptar peticiones con token válido" time="0.002">
    </testcase>
    <testcase classname="Auth/index Middleware verifyToken" name="debe rechazar peticiones con token inválido" time="0.015">
    </testcase>
    <testcase classname="Auth/index Middleware checkRole" name="debe rechazar peticiones sin usuario autenticado" time="0.002">
    </testcase>
    <testcase classname="Auth/index Middleware checkRole" name="debe permitir acceso si el usuario tiene el rol requerido" time="0.001">
    </testcase>
    <testcase classname="Auth/index Middleware checkRole" name="debe rechazar acceso si el usuario no tiene el rol requerido" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Auth Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:20" time="1.384" tests="12">
    <testcase classname="Auth Middleware authMiddleware" name="debe permitir rutas públicas sin verificar token" time="0.016">
    </testcase>
    <testcase classname="Auth Middleware authMiddleware" name="debe permitir rutas de autenticación sin verificar token" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware authMiddleware" name="debe rechazar peticiones sin token" time="0.003">
    </testcase>
    <testcase classname="Auth Middleware authMiddleware" name="debe rechazar peticiones con formato de token incorrecto" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware authMiddleware" name="debe aceptar peticiones con token válido" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware authMiddleware" name="debe rechazar peticiones con token inválido" time="0.002">
    </testcase>
    <testcase classname="Auth Middleware checkRole" name="debe permitir acceso a usuarios con el rol correcto" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware checkRole" name="debe rechazar acceso a usuarios sin el rol requerido" time="0.005">
    </testcase>
    <testcase classname="Auth Middleware checkRole" name="debe manejar peticiones sin información de usuario" time="0.002">
    </testcase>
    <testcase classname="Auth Middleware checkPermissions" name="debe permitir acceso a usuarios con los permisos requeridos" time="0.002">
    </testcase>
    <testcase classname="Auth Middleware checkPermissions" name="debe rechazar acceso a usuarios sin los permisos requeridos" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware checkPermissions" name="debe manejar peticiones sin información de usuario" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="CSRF Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:22" time="0.139" tests="13">
    <testcase classname="CSRF Middleware csrfMiddleware" name="debe permitir métodos HTTP seguros sin token CSRF" time="0.002">
    </testcase>
    <testcase classname="CSRF Middleware csrfMiddleware" name="debe rechazar peticiones POST sin token CSRF" time="0.004">
    </testcase>
    <testcase classname="CSRF Middleware csrfMiddleware" name="debe rechazar peticiones con token CSRF inválido" time="0.002">
    </testcase>
    <testcase classname="CSRF Middleware csrfMiddleware" name="debe aceptar peticiones con token CSRF válido" time="0.001">
    </testcase>
    <testcase classname="CSRF Middleware csrfMiddleware" name="debe manejar correctamente cuando no hay sesión" time="0.001">
    </testcase>
    <testcase classname="CSRF Middleware csrfMiddleware" name="debe rechazar operaciones PUT sin token CSRF" time="0.001">
    </testcase>
    <testcase classname="CSRF Middleware csrfMiddleware" name="debe rechazar operaciones DELETE sin token CSRF" time="0.001">
    </testcase>
    <testcase classname="CSRF Middleware csrfMiddleware" name="debe rechazar operaciones PATCH sin token CSRF" time="0.002">
    </testcase>
    <testcase classname="CSRF Middleware csrfMiddleware" name="debe permitir operaciones OPTIONS sin token CSRF" time="0.001">
    </testcase>
    <testcase classname="CSRF Middleware csrfMiddleware" name="debe permitir operaciones HEAD sin token CSRF" time="0.001">
    </testcase>
    <testcase classname="CSRF Middleware generateCsrfToken" name="debe generar un token CSRF con formato correcto" time="0.002">
    </testcase>
    <testcase classname="CSRF Middleware generateCsrfToken" name="debe generar tokens diferentes para cada llamada" time="0.001">
    </testcase>
    <testcase classname="CSRF Middleware generateCsrfToken" name="debe generar tokens diferentes para sesiones diferentes" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Auth Service" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:20" time="1.452" tests="59">
    <testcase classname="Auth Service login" name="debe rechazar login sin credenciales" time="0.053">
    </testcase>
    <testcase classname="Auth Service login" name="debe rechazar login para usuario no existente" time="0.114">
    </testcase>
    <testcase classname="Auth Service login" name="debe rechazar login con contraseña incorrecta" time="0.005">
    </testcase>
    <testcase classname="Auth Service login" name="debe bloquear cuenta después de múltiples intentos fallidos" time="0.003">
    </testcase>
    <testcase classname="Auth Service login" name="debe permitir login con credenciales correctas" time="0.006">
    </testcase>
    <testcase classname="Auth Service login" name="debe desbloquear automáticamente una cuenta si el periodo de bloqueo ha expirado" time="0.004">
    </testcase>
    <testcase classname="Auth Service login" name="debe rechazar el login si la cuenta está bloqueada y el periodo no ha expirado" time="0.003">
    </testcase>
    <testcase classname="Auth Service verifyToken" name="debe rechazar cuando no se proporciona token" time="0.003">
    </testcase>
    <testcase classname="Auth Service verifyToken" name="debe rechazar token inválido" time="0.008">
    </testcase>
    <testcase classname="Auth Service verifyToken" name="debe rechazar token expirado" time="0.008">
    </testcase>
    <testcase classname="Auth Service verifyToken" name="debe rechazar si el usuario no existe o está bloqueado" time="0.006">
    </testcase>
    <testcase classname="Auth Service verifyToken" name="debe devolver información de usuario para token válido" time="0.001">
    </testcase>
    <testcase classname="Auth Service verifyToken" name="debe propagar otros errores durante la verificación del token" time="0.002">
    </testcase>
    <testcase classname="Auth Service verifyToken" name="debe manejar errores específicos al verificar token" time="0.003">
    </testcase>
    <testcase classname="Auth Service validatePassword" name="debe rechazar contraseñas demasiado cortas" time="0.007">
    </testcase>
    <testcase classname="Auth Service validatePassword" name="debe rechazar contraseñas que no cumplen con los requisitos de complejidad" time="0.01">
    </testcase>
    <testcase classname="Auth Service validatePassword" name="debe aceptar contraseñas que cumplen con todos los requisitos" time="0.001">
    </testcase>
    <testcase classname="Auth Service resetPassword" name="debe retornar falso cuando hay problemas para verificar el token" time="0.003">
    </testcase>
    <testcase classname="Auth Service requestPasswordReset" name="debe siempre retornar éxito por razones de seguridad, incluso para email inexistente" time="0.003">
    </testcase>
    <testcase classname="Auth Service requestPasswordReset" name="debe generar token de recuperación exitosamente" time="0.003">
    </testcase>
    <testcase classname="Auth Service refreshToken" name="debe rechazar cuando no se proporciona token de refresco" time="0.002">
    </testcase>
    <testcase classname="Auth Service refreshToken" name="debe rechazar cuando el token de refresco no existe en la base de datos" time="0.002">
    </testcase>
    <testcase classname="Auth Service refreshToken" name="debe renovar tokens exitosamente" time="0.002">
    </testcase>
    <testcase classname="Auth Service logout" name="debe manejar caso sin tokens" time="0.001">
    </testcase>
    <testcase classname="Auth Service logout" name="debe invalidar refresh token" time="0.001">
    </testcase>
    <testcase classname="Auth Service logout" name="debe manejar JWT token inválido" time="0.001">
    </testcase>
    <testcase classname="Auth Service logout" name="debe cerrar todas las sesiones del usuario si la configuración lo permite" time="0.002">
    </testcase>
    <testcase classname="Auth Service changePassword" name="debe fallar si el usuario no existe" time="0.001">
    </testcase>
    <testcase classname="Auth Service changePassword" name="debe fallar si la contraseña actual es incorrecta" time="0.001">
    </testcase>
    <testcase classname="Auth Service changePassword" name="debe cambiar la contraseña exitosamente" time="0.001">
    </testcase>
    <testcase classname="Auth Service changePassword" name="debe manejar errores durante el cambio de contraseña" time="0.001">
    </testcase>
    <testcase classname="Auth Service getUserByCIP" name="debe retornar null si el usuario no existe" time="0.001">
    </testcase>
    <testcase classname="Auth Service getUserByCIP" name="debe retornar datos de usuario si existe" time="0.001">
    </testcase>
    <testcase classname="Auth Service getUserByCIP" name="debe manejar errores en la consulta" time="0.001">
    </testcase>
    <testcase classname="Auth Service updatePassword" name="debe actualizar la contraseña exitosamente" time="0.001">
    </testcase>
    <testcase classname="Auth Service updatePassword" name="debe manejar errores durante la actualización" time="0.001">
    </testcase>
    <testcase classname="Auth Service checkUserExists" name="debe retornar true si el usuario existe" time="0.001">
    </testcase>
    <testcase classname="Auth Service checkUserExists" name="debe retornar false si el usuario no existe" time="0">
    </testcase>
    <testcase classname="Auth Service checkUserExists" name="debe manejar errores en la consulta" time="0.002">
    </testcase>
    <testcase classname="Auth Service checkUserExists" name="debe manejar errores específicos en la comprobación de existencia" time="0.002">
    </testcase>
    <testcase classname="Auth Service registerUser" name="debe registrar un nuevo usuario exitosamente" time="0.005">
    </testcase>
    <testcase classname="Auth Service registerUser" name="debe rechazar contraseñas que no cumplen con la política" time="0.003">
    </testcase>
    <testcase classname="Auth Service registerUser" name="debe rechazar CIP duplicados" time="0.001">
    </testcase>
    <testcase classname="Auth Service registerUser" name="debe manejar otros errores durante el registro" time="0.002">
    </testcase>
    <testcase classname="Auth Service blockUser" name="debe rechazar bloquear la propia cuenta" time="0.002">
    </testcase>
    <testcase classname="Auth Service blockUser" name="debe rechazar si el usuario no existe" time="0.001">
    </testcase>
    <testcase classname="Auth Service blockUser" name="debe retornar éxito si el usuario ya está bloqueado" time="0.001">
    </testcase>
    <testcase classname="Auth Service blockUser" name="debe rechazar bloquear usuarios administradores" time="0.001">
    </testcase>
    <testcase classname="Auth Service blockUser" name="debe bloquear usuario exitosamente" time="0.002">
    </testcase>
    <testcase classname="Auth Service blockUser" name="debe manejar errores durante el bloqueo" time="0.001">
    </testcase>
    <testcase classname="Auth Service unblockUser" name="debe rechazar si el usuario no existe" time="0.001">
    </testcase>
    <testcase classname="Auth Service unblockUser" name="debe retornar éxito si el usuario ya está desbloqueado" time="0.001">
    </testcase>
    <testcase classname="Auth Service unblockUser" name="debe desbloquear usuario exitosamente" time="0">
    </testcase>
    <testcase classname="Auth Service unblockUser" name="debe manejar errores durante el desbloqueo" time="0.002">
    </testcase>
    <testcase classname="Auth Service getActiveSessions" name="debe retornar lista de sesiones activas" time="0.001">
    </testcase>
    <testcase classname="Auth Service getActiveSessions" name="debe manejar errores al obtener sesiones" time="0.001">
    </testcase>
    <testcase classname="Auth Service closeAllSessions" name="debe cerrar todas las sesiones de un usuario" time="0.001">
    </testcase>
    <testcase classname="Auth Service closeAllSessions" name="debe manejar errores al cerrar sesiones" time="0.001">
    </testcase>
    <testcase classname="Auth Service Funciones auxiliares" name="mapUsuarioResponse debe mapear correctamente" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Dashboard Routes" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:22" time="0.135" tests="3">
    <testcase classname="Dashboard Routes" name="debe configurar ruta GET / para obtener datos del dashboard" time="0.01">
    </testcase>
    <testcase classname="Dashboard Routes" name="debe configurar middleware de autenticación para todas las rutas" time="0.001">
    </testcase>
    <testcase classname="Dashboard Routes" name="debe configurar ruta GET /statistics para obtener estadísticas" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Pruebas de Entidad AreaEspecializada" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:20" time="1.666" tests="7">
    <testcase classname="Pruebas de Entidad AreaEspecializada" name="Debería crear una nueva área especializada" time="0.029">
    </testcase>
    <testcase classname="Pruebas de Entidad AreaEspecializada" name="Debería obtener un área por ID" time="0.006">
    </testcase>
    <testcase classname="Pruebas de Entidad AreaEspecializada" name="Debería obtener un área por código de identificación" time="0.003">
    </testcase>
    <testcase classname="Pruebas de Entidad AreaEspecializada" name="Debería actualizar datos de un área" time="0.008">
    </testcase>
    <testcase classname="Pruebas de Entidad AreaEspecializada" name="Debería desactivar un área" time="0.007">
    </testcase>
    <testcase classname="Pruebas de Entidad AreaEspecializada" name="Debería eliminar físicamente un área" time="0.011">
    </testcase>
    <testcase classname="Pruebas de Entidad AreaEspecializada" name="Debería listar todas las áreas activas" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Database Helpers" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:22" time="0.209" tests="20">
    <testcase classname="Database Helpers loadEnv" name="debería cargar variables de entorno desde la ruta por defecto" time="0.004">
    </testcase>
    <testcase classname="Database Helpers loadEnv" name="debería cargar variables de entorno desde una ruta personalizada" time="0.011">
    </testcase>
    <testcase classname="Database Helpers executeQuery" name="debería ejecutar consultas SQL correctamente" time="0.002">
    </testcase>
    <testcase classname="Database Helpers executeQuery" name="debería usar valores por defecto para la configuración de conexión" time="0.001">
    </testcase>
    <testcase classname="Database Helpers executeQuery" name="debería usar variables de entorno para la configuración de conexión" time="0.001">
    </testcase>
    <testcase classname="Database Helpers executeQuery" name="debería permitir múltiples declaraciones SQL" time="0.001">
    </testcase>
    <testcase classname="Database Helpers disableConstraints" name="debería desactivar restricciones correctamente" time="0.001">
    </testcase>
    <testcase classname="Database Helpers disableConstraints" name="debería manejar errores al eliminar triggers" time="0.001">
    </testcase>
    <testcase classname="Database Helpers disableConstraints" name="debería propagar errores en la desactivación de restricciones" time="0.006">
    </testcase>
    <testcase classname="Database Helpers enableConstraints" name="debería reactivar restricciones correctamente" time="0.001">
    </testcase>
    <testcase classname="Database Helpers enableConstraints" name="debería propagar errores en la reactivación de restricciones" time="0.003">
    </testcase>
    <testcase classname="Database Helpers getDefaultRoles" name="debería retornar la lista de roles predefinidos" time="0.004">
    </testcase>
    <testcase classname="Database Helpers getDefaultAreas" name="debería retornar la lista de áreas predefinidas" time="0.003">
    </testcase>
    <testcase classname="Database Helpers hashPassword" name="debería retornar un hash simulado en entorno de pruebas" time="0.001">
    </testcase>
    <testcase classname="Database Helpers hashPassword" name="debería generar un hash con bcrypt en entorno de producción" time="0.001">
    </testcase>
    <testcase classname="Database Helpers verifyPassword" name="debería verificar la contraseña correctamente en entorno de pruebas" time="0.001">
    </testcase>
    <testcase classname="Database Helpers verifyPassword" name="debería verificar la contraseña con bcrypt en entorno de producción" time="0.005">
    </testcase>
    <testcase classname="Database Helpers getDefaultPermissions" name="debería retornar la lista de permisos predefinidos" time="0.005">
    </testcase>
    <testcase classname="Database Helpers forceReconnect" name="debería reconectar a la base de datos exitosamente" time="0.003">
    </testcase>
    <testcase classname="Database Helpers forceReconnect" name="debería manejar errores al reconectar" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Pruebas de API Básicas" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:20" time="1.986" tests="3">
    <testcase classname="Pruebas de API Básicas" name="La ruta /health debería responder correctamente" time="0.065">
    </testcase>
    <testcase classname="Pruebas de API Básicas" name="La ruta /api/health debería responder correctamente" time="0.011">
    </testcase>
    <testcase classname="Pruebas de API Básicas" name="Debería manejar correctamente rutas inexistentes" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="Verificación de Tablas en Base de Datos" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:21" time="0.848" tests="3">
    <testcase classname="Verificación de Tablas en Base de Datos" name="Debería verificar la existencia de tablas estándar" time="0.12">
    </testcase>
    <testcase classname="Verificación de Tablas en Base de Datos" name="Debería verificar la existencia de tablas especializadas" time="0.011">
    </testcase>
    <testcase classname="Verificación de Tablas en Base de Datos" name="Debería mostrar un resumen de la estructura de la base de datos" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Core modules" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:22" time="0.736" tests="22">
    <testcase classname="Core modules punycode-shim.js" name="should export punycode2 module" time="0.015">
    </testcase>
    <testcase classname="Core modules start.js" name="should test winston logger format" time="0.123">
    </testcase>
    <testcase classname="Core modules start.js" name="should redirect punycode module and set environment variables" time="0.014">
    </testcase>
    <testcase classname="Core modules start.js" name="should respect explicit server settings" time="0.007">
    </testcase>
    <testcase classname="Core modules start.js" name="should log in non-development environments" time="0.006">
    </testcase>
    <testcase classname="Core modules start.js" name="should display server info" time="0.008">
    </testcase>
    <testcase classname="Core modules start.js" name="should start simple server" time="0.009">
    </testcase>
    <testcase classname="Core modules start.js" name="should start full server" time="0.008">
    </testcase>
    <testcase classname="Core modules start.js" name="should test simple server error path" time="0.034">
    </testcase>
    <testcase classname="Core modules start.js" name="should test full server with fallback error path" time="0.013">
    </testcase>
    <testcase classname="Core modules start.js" name="should test winston logger colorize format" time="0.006">
    </testcase>
    <testcase classname="Core modules start.js" name="should test simple server with TEST_MODE=mock" time="0.006">
    </testcase>
    <testcase classname="Core modules start.js" name="should test full server with TEST_MODE=mock and fallback" time="0.018">
    </testcase>
    <testcase classname="Core modules start.js" name="should run admin scripts and start server" time="0.028">
    </testcase>
    <testcase classname="Core modules start.js" name="should handle admin script errors" time="0.02">
    </testcase>
    <testcase classname="Core modules start.js" name="should handle spawn errors in main" time="0.006">
    </testcase>
    <testcase classname="Core modules start.js" name="should handle main function errors and trigger process.exit(1)" time="0.006">
    </testcase>
    <testcase classname="Core modules start.js" name="should export all required functions" time="0.006">
    </testcase>
    <testcase classname="Core modules start.js" name="should test full server fallback in non-mock test mode" time="0.006">
    </testcase>
    <testcase classname="Core modules start.js" name="should test simple server in non-mock test mode" time="0.009">
    </testcase>
    <testcase classname="Core modules start.js" name="should test non-test environment execution" time="0.025">
    </testcase>
    <testcase classname="Core modules start.js" name="should cover remaining edge cases in start.js" time="0.209">
    </testcase>
  </testsuite>
  <testsuite name="Auth Controller" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:20" time="1.913" tests="8">
    <testcase classname="Auth Controller login" name="debe devolver error 400 si faltan credenciales" time="0.019">
    </testcase>
    <testcase classname="Auth Controller login" name="debe devolver token válido en caso de login exitoso" time="0.008">
    </testcase>
    <testcase classname="Auth Controller login" name="debe manejar errores de autenticación" time="0.087">
    </testcase>
    <testcase classname="Auth Controller refreshToken" name="debe rechazar peticiones sin token de refresco" time="0.001">
    </testcase>
    <testcase classname="Auth Controller refreshToken" name="debe refrescar tokens cuando se proporciona un refreshToken válido" time="0.003">
    </testcase>
    <testcase classname="Auth Controller refreshToken" name="debe manejar errores en la actualización del token" time="0.001">
    </testcase>
    <testcase classname="Auth Controller logout" name="debe procesar el logout correctamente" time="0.004">
    </testcase>
    <testcase classname="Auth Controller logout" name="debe manejar errores durante el logout" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="DB Cache Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:22" time="0.139" tests="11">
    <testcase classname="DB Cache Middleware cacheQuery" name="debe devolver datos en caché si existen" time="0.002">
    </testcase>
    <testcase classname="DB Cache Middleware cacheQuery" name="debe continuar y configurar caché cuando no hay cache" time="0.002">
    </testcase>
    <testcase classname="DB Cache Middleware cacheQuery" name="debe manejar errores y continuar" time="0.002">
    </testcase>
    <testcase classname="DB Cache Middleware invalidateQueryCache" name="debe invalidar las claves que coinciden con los patrones" time="0.002">
    </testcase>
    <testcase classname="DB Cache Middleware invalidateQueryCache" name="no debe hacer nada si no hay coincidencias" time="0.001">
    </testcase>
    <testcase classname="DB Cache Middleware invalidateQueryCache" name="debe manejar errores y continuar" time="0">
    </testcase>
    <testcase classname="DB Cache Middleware clearQueryCache" name="debe limpiar toda la caché" time="0.001">
    </testcase>
    <testcase classname="DB Cache Middleware clearQueryCache" name="debe manejar errores" time="0">
    </testcase>
    <testcase classname="DB Cache Middleware cacheQueryWithParams" name="debe usar generador de clave personalizado" time="0.001">
    </testcase>
    <testcase classname="DB Cache Middleware cacheQueryWithParams" name="debe guardar en caché con la clave generada" time="0.001">
    </testcase>
    <testcase classname="DB Cache Middleware cacheQueryWithParams" name="debe manejar errores y continuar" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Document Controller" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:22" time="0.18" tests="3">
    <testcase classname="Document Controller getAllDocuments" name="should get all documents with default pagination" time="0.006">
    </testcase>
    <testcase classname="Document Controller getAllDocuments" name="should apply filters when provided in query params" time="0.002">
    </testcase>
    <testcase classname="Document Controller getAllDocuments" name="should handle database errors" time="0.049">
    </testcase>
  </testsuite>
  <testsuite name="Document Routes" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:22" time="0.136" tests="3">
    <testcase classname="Document Routes" name="debe configurar rutas GET para listar y obtener documentos" time="0.015">
    </testcase>
    <testcase classname="Document Routes" name="debe configurar multer para la subida de archivos" time="0.006">
    </testcase>
    <testcase classname="Document Routes" name="debe configurar el filtrado de tipos de archivo" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Pruebas de Entidad Derivacion" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:22" time="0.379" tests="6">
    <testcase classname="Pruebas de Entidad Derivacion" name="Debería crear una nueva derivación" time="0.009">
    </testcase>
    <testcase classname="Pruebas de Entidad Derivacion" name="Debería obtener una derivación por ID" time="0.003">
    </testcase>
    <testcase classname="Pruebas de Entidad Derivacion" name="Debería actualizar el estado de una derivación" time="0.006">
    </testcase>
    <testcase classname="Pruebas de Entidad Derivacion" name="Debería listar derivaciones pendientes" time="0.002">
    </testcase>
    <testcase classname="Pruebas de Entidad Derivacion" name="Debería listar derivaciones por área de destino" time="0.003">
    </testcase>
    <testcase classname="Pruebas de Entidad Derivacion" name="Debería eliminar una derivación" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Pruebas de Entidad Documento" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:22" time="0.201" tests="6">
    <testcase classname="Pruebas de Entidad Documento" name="Debería crear un nuevo documento" time="0.006">
    </testcase>
    <testcase classname="Pruebas de Entidad Documento" name="Debería obtener un documento por ID" time="0.003">
    </testcase>
    <testcase classname="Pruebas de Entidad Documento" name="Debería obtener un documento por número de registro" time="0.008">
    </testcase>
    <testcase classname="Pruebas de Entidad Documento" name="Debería actualizar estado de un documento" time="0.004">
    </testcase>
    <testcase classname="Pruebas de Entidad Documento" name="Debería cambiar el área de un documento" time="0.005">
    </testcase>
    <testcase classname="Pruebas de Entidad Documento" name="Debería eliminar un documento" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Database Helpers" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:22" time="0.746" tests="7">
    <testcase classname="Database Helpers hashPassword" name="debe hashear una contraseña correctamente" time="0.007">
    </testcase>
    <testcase classname="Database Helpers hashPassword" name="debe manejar contraseñas vacías" time="0">
    </testcase>
    <testcase classname="Database Helpers verifyPassword" name="debe verificar una contraseña correcta" time="0.001">
    </testcase>
    <testcase classname="Database Helpers verifyPassword" name="debe rechazar una contraseña incorrecta" time="0">
    </testcase>
    <testcase classname="Database Helpers getDefaultRoles" name="debe devolver un array con los roles predeterminados" time="0.004">
    </testcase>
    <testcase classname="Database Helpers getDefaultAreas" name="debe devolver un array con las áreas predeterminadas" time="0.004">
    </testcase>
    <testcase classname="Database Helpers getDefaultPermissions" name="debe devolver un array con los permisos predeterminados" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Pruebas de Entidad DocumentoArchivo" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:22" time="0.259" tests="6">
    <testcase classname="Pruebas de Entidad DocumentoArchivo" name="Debería crear un nuevo archivo de documento" time="0.008">
    </testcase>
    <testcase classname="Pruebas de Entidad DocumentoArchivo" name="Debería obtener un archivo por ID" time="0.004">
    </testcase>
    <testcase classname="Pruebas de Entidad DocumentoArchivo" name="Debería obtener archivos por ID de documento" time="0.004">
    </testcase>
    <testcase classname="Pruebas de Entidad DocumentoArchivo" name="Debería actualizar datos de un archivo" time="0.009">
    </testcase>
    <testcase classname="Pruebas de Entidad DocumentoArchivo" name="Debería eliminar un archivo" time="0.006">
    </testcase>
    <testcase classname="Pruebas de Entidad DocumentoArchivo" name="Debería probar el procedimiento almacenado sp_subir_archivo_documento" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="Error Handler Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.158" tests="25">
    <testcase classname="Error Handler Middleware errorHandler" name="debe manejar errores genéricos con código 500 por defecto" time="0.005">
    </testcase>
    <testcase classname="Error Handler Middleware errorHandler" name="debe respetar el código de estado del error" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware errorHandler" name="debe incluir stack en modo development" time="0.003">
    </testcase>
    <testcase classname="Error Handler Middleware validationErrorHandler" name="debe manejar errores de validación" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware validationErrorHandler" name="debe pasar al siguiente middleware si no es un error de validación" time="0">
    </testcase>
    <testcase classname="Error Handler Middleware authErrorHandler" name="debe manejar errores de autenticación" time="0.002">
    </testcase>
    <testcase classname="Error Handler Middleware authErrorHandler" name="debe pasar al siguiente middleware si no es un error de autenticación" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware dbErrorHandler" name="debe manejar errores de base de datos genéricos" time="0.003">
    </testcase>
    <testcase classname="Error Handler Middleware dbErrorHandler" name="debe manejar error de duplicado" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware dbErrorHandler" name="debe manejar error de referencia" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware dbErrorHandler" name="debe manejar error de null no permitido" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware dbErrorHandler" name="debe manejar error de datos muy largos" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware dbErrorHandler" name="debe manejar errores de timeout de bloqueo" time="0.004">
    </testcase>
    <testcase classname="Error Handler Middleware dbErrorHandler" name="debe manejar errores de deadlock" time="0">
    </testcase>
    <testcase classname="Error Handler Middleware dbErrorHandler" name="debe pasar al siguiente middleware si no es un error de base de datos" time="0">
    </testcase>
    <testcase classname="Error Handler Middleware fileErrorHandler" name="debe manejar errores de archivo genéricos" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware fileErrorHandler" name="debe manejar error de archivo no encontrado" time="0">
    </testcase>
    <testcase classname="Error Handler Middleware fileErrorHandler" name="debe manejar error de permiso denegado" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware fileErrorHandler" name="debe manejar error de archivo existente" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware fileErrorHandler" name="debe manejar error de espacio insuficiente" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware fileErrorHandler" name="debe pasar al siguiente middleware si no es un error de archivo" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware joiErrorHandler" name="debe manejar errores de validación Joi" time="0.004">
    </testcase>
    <testcase classname="Error Handler Middleware joiErrorHandler" name="debe pasar al siguiente middleware si no es un error Joi" time="0.002">
    </testcase>
    <testcase classname="Error Handler Middleware jsonSyntaxErrorHandler" name="debe manejar errores de sintaxis JSON" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware jsonSyntaxErrorHandler" name="debe pasar al siguiente middleware si no es un error de sintaxis JSON" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="File Handler Middleware (index.js)" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.188" tests="16">
    <testcase classname="File Handler Middleware (index.js) Inicialización del módulo" name="debe crear los directorios de upload si no existen" time="0.011">
    </testcase>
    <testcase classname="File Handler Middleware (index.js) Inicialización del módulo" name="no debe crear directorios si ya existen" time="0.002">
    </testcase>
    <testcase classname="File Handler Middleware (index.js) Configuración de almacenamiento" name="debe configurar multer storage con destination y filename correctos" time="0.002">
    </testcase>
    <testcase classname="File Handler Middleware (index.js) Configuración de almacenamiento" name="debe crear directorio específico para documento si no existe" time="0.002">
    </testcase>
    <testcase classname="File Handler Middleware (index.js) Filtrado de archivos" name="debe aceptar archivos con MIME types permitidos" time="0.003">
    </testcase>
    <testcase classname="File Handler Middleware (index.js) Filtrado de archivos" name="debe rechazar archivos con MIME types no permitidos" time="0.002">
    </testcase>
    <testcase classname="File Handler Middleware (index.js) Filtrado de archivos" name="debe rechazar archivos con extensiones no permitidas" time="0.002">
    </testcase>
    <testcase classname="File Handler Middleware (index.js) Manejo de errores" name="debe manejar errores de límite de tamaño de archivo" time="0.003">
    </testcase>
    <testcase classname="File Handler Middleware (index.js) Manejo de errores" name="debe manejar errores de límite de cantidad de archivos" time="0.002">
    </testcase>
    <testcase classname="File Handler Middleware (index.js) Manejo de errores" name="debe manejar otros errores de multer" time="0.004">
    </testcase>
    <testcase classname="File Handler Middleware (index.js) Manejo de errores" name="debe manejar errores generales" time="0.003">
    </testcase>
    <testcase classname="File Handler Middleware (index.js) Manejo de errores" name="debe usar mensaje por defecto cuando err.message es undefined" time="0.008">
    </testcase>
    <testcase classname="File Handler Middleware (index.js) Manejo de errores" name="debe pasar al siguiente middleware si no hay error" time="0.007">
    </testcase>
    <testcase classname="File Handler Middleware (index.js) Middleware principal" name="debe aplicar el middleware de multer para rutas de subida de archivos" time="0.014">
    </testcase>
    <testcase classname="File Handler Middleware (index.js) Middleware principal" name="debe omitir el middleware para rutas que no son de subida de archivos" time="0.002">
    </testcase>
    <testcase classname="File Handler Middleware (index.js) Middleware principal" name="debe manejar errores desde el middleware de multer" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="File Handler Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.164" tests="23">
    <testcase classname="File Handler Middleware File Handler Exports" name="should export the expected middleware functions" time="0.003">
    </testcase>
    <testcase classname="File Handler Middleware validateFile" name="should call next() for valid files" time="0.003">
    </testcase>
    <testcase classname="File Handler Middleware validateFile" name="should return 400 when no file is provided" time="0.002">
    </testcase>
    <testcase classname="File Handler Middleware validateFile" name="should return 400 for files exceeding size limit" time="0.002">
    </testcase>
    <testcase classname="File Handler Middleware validateFile" name="should return 400 for disallowed file types" time="0.001">
    </testcase>
    <testcase classname="File Handler Middleware processFilePond" name="should process FilePond uploads" time="0.006">
    </testcase>
    <testcase classname="File Handler Middleware processFilePond" name="should set req.file from req.files.filepond" time="0.001">
    </testcase>
    <testcase classname="File Handler Middleware processFilePond" name="should call next() if req.file is already set" time="0.001">
    </testcase>
    <testcase classname="File Handler Middleware deleteFile" name="should delete a file and call next()" time="0.001">
    </testcase>
    <testcase classname="File Handler Middleware deleteFile" name="should handle errors during file deletion" time="0.001">
    </testcase>
    <testcase classname="File Handler Middleware moveFile" name="should move a file and call next()" time="0.004">
    </testcase>
    <testcase classname="File Handler Middleware moveFile" name="should handle errors when source file does not exist" time="0.001">
    </testcase>
    <testcase classname="File Handler Middleware copyFile" name="should copy a file and call next()" time="0.002">
    </testcase>
    <testcase classname="File Handler Middleware copyFile" name="should handle errors during file copy" time="0.001">
    </testcase>
    <testcase classname="File Handler Middleware checkFileExists" name="should check if a file exists and return true if it does" time="0.001">
    </testcase>
    <testcase classname="File Handler Middleware checkFileExists" name="should handle when a file does not exist" time="0.001">
    </testcase>
    <testcase classname="File Handler Middleware checkFileExists" name="should handle when filepath is not specified" time="0.001">
    </testcase>
    <testcase classname="File Handler Middleware handleFilePondUpload" name="should handle FilePond uploads" time="0">
    </testcase>
    <testcase classname="File Handler Middleware handleFilePondUpload" name="should handle FilePond upload with different endpoint" time="0.001">
    </testcase>
    <testcase classname="File Handler Middleware handleFilePondUpload" name="should handle MulterError during upload" time="0.001">
    </testcase>
    <testcase classname="File Handler Middleware fileHandlerMiddleware" name="should call next() for non-file upload paths" time="0.001">
    </testcase>
    <testcase classname="File Handler Middleware fileHandlerMiddleware" name="should handle file upload paths" time="0">
    </testcase>
    <testcase classname="File Handler Middleware fileHandlerMiddleware" name="should handle generic errors during upload" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Routes Index" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.137" tests="1">
    <testcase classname="Routes Index" name="debe configurar el middleware para extraer la versión de API" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="Security Middleware Index Module" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.131" tests="3">
    <testcase classname="Security Middleware Index Module" name="should export rateLimitMiddleware with all required limiters" time="0.001">
    </testcase>
    <testcase classname="Security Middleware Index Module" name="should configure rate limit middleware with correct parameters" time="0">
    </testcase>
    <testcase classname="Security Middleware Index Module" name="should handle rate limit scenarios correctly" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="CSRF Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:22" time="1.115" tests="22">
    <testcase classname="CSRF Middleware CSRF Protection" name="should allow GET requests without CSRF token" time="0.071">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Protection" name="should allow HEAD requests without CSRF token" time="0.017">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Protection" name="should allow OPTIONS requests without CSRF token" time="0.011">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Protection" name="should reject POST requests without CSRF token" time="0.014">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Protection" name="should reject PUT requests without CSRF token" time="0.013">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Protection" name="should reject DELETE requests without CSRF token" time="0.014">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Protection" name="should reject PATCH requests without CSRF token" time="0.011">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Protection" name="should reject requests with invalid CSRF token" time="0.015">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Protection" name="should allow requests with valid CSRF token" time="0.014">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Protection" name="should handle requests with empty CSRF token" time="0.013">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Protection" name="should handle requests with whitespace-only CSRF token" time="0.026">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Protection" name="should handle requests with session object but no ID" time="0.01">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Protection" name="should handle requests with valid session ID" time="0.008">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Token Generation" name="should generate valid CSRF token" time="0.002">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Token Generation" name="should generate unique tokens for different sessions" time="0.001">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Token Generation" name="should generate unique tokens for same session at different times" time="0.004">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Token Generation" name="should handle missing CSRF_SECRET environment variable" time="0.024">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Token Generation" name="should handle invalid session ID" time="0.003">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Token Validation" name="should validate token length (valid token)" time="0">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Token Validation" name="should validate token length (invalid token)" time="0.002">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Token Validation" name="should validate null or undefined token" time="0.001">
    </testcase>
    <testcase classname="CSRF Middleware CSRF Token Validation" name="should perform end-to-end validation through middleware" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="Pruebas de Base de Datos" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:22" time="0.805" tests="5">
    <testcase classname="Pruebas de Base de Datos" name="La configuración de base de datos está definida" time="0.002">
    </testcase>
    <testcase classname="Pruebas de Base de Datos" name="El pool de conexiones está definido" time="0.001">
    </testcase>
    <testcase classname="Pruebas de Base de Datos" name="La función testConnection debería ejecutarse correctamente" time="0.063">
    </testcase>
    <testcase classname="Pruebas de Base de Datos" name="La función executeQuery debería ejecutar consultas SQL" time="0.003">
    </testcase>
    <testcase classname="Pruebas de Base de Datos" name="Debería manejar errores de sintaxis SQL correctamente" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Logger Avanzado" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.166" tests="12">
    <testcase classname="Logger Avanzado Inicialización" name="debería crear el directorio de logs si no existe" time="0.011">
    </testcase>
    <testcase classname="Logger Avanzado Inicialización" name="debería configurar correctamente el nivel de log desde la variable de entorno" time="0.003">
    </testcase>
    <testcase classname="Logger Avanzado Inicialización" name="debería agregar transport de archivo si LOG_TO_FILE es true" time="0.002">
    </testcase>
    <testcase classname="Logger Avanzado Inicialización" name="debería no agregar transport de consola si LOG_TO_CONSOLE es false" time="0.003">
    </testcase>
    <testcase classname="Logger Avanzado Funciones de log" name="debería exponer correctamente las funciones de log" time="0.004">
    </testcase>
    <testcase classname="Logger Avanzado Funciones de log" name="la función log debería llamar a logger.log con los parámetros correctos" time="0.003">
    </testcase>
    <testcase classname="Logger Avanzado Funciones de log" name="logSecurityEvent debería registrar eventos de seguridad correctamente" time="0.004">
    </testcase>
    <testcase classname="Logger Avanzado Funciones de log" name="logSecurityEvent debería registrar eventos críticos también como errores" time="0.003">
    </testcase>
    <testcase classname="Logger Avanzado Funciones de log" name="logHttpRequest debería registrar solicitudes HTTP correctamente" time="0.003">
    </testcase>
    <testcase classname="Logger Avanzado Funciones de log" name="logHttpRequest no debería registrar solicitudes en entorno de prueba" time="0.003">
    </testcase>
    <testcase classname="Logger Avanzado Formatos y sanitización" name="debería aplicar los formatos correctos al crear el logger" time="0.003">
    </testcase>
    <testcase classname="Logger Avanzado Formatos y sanitización" name="debería sanitizar información sensible al registrar" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Logger Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.148" tests="13">
    <testcase classname="Logger Middleware httpLogger" name="debe registrar el inicio de petición y llamar a next" time="0.003">
    </testcase>
    <testcase classname="Logger Middleware httpLogger" name="debe registrar el fin de petición cuando termina" time="0.003">
    </testcase>
    <testcase classname="Logger Middleware httpLogger" name="debe registrar error cuando el status es &gt;= 400" time="0.001">
    </testcase>
    <testcase classname="Logger Middleware httpLogger" name="debe registrar advertencia cuando la petición es lenta" time="0.001">
    </testcase>
    <testcase classname="Logger Middleware errorLogger" name="debe registrar errores y llamar a next con el error" time="0.009">
    </testcase>
    <testcase classname="Logger Middleware authLogger" name="debe registrar intentos de autenticación" time="0.001">
    </testcase>
    <testcase classname="Logger Middleware authLogger" name="debe registrar advertencia para autenticación fallida" time="0.004">
    </testcase>
    <testcase classname="Logger Middleware authLogger" name="no debe registrar para rutas no relacionadas con auth" time="0.001">
    </testcase>
    <testcase classname="Logger Middleware accessLogger" name="debe registrar acceso a recursos sensibles" time="0.002">
    </testcase>
    <testcase classname="Logger Middleware accessLogger" name="debe registrar advertencia para acceso denegado" time="0.001">
    </testcase>
    <testcase classname="Logger Middleware accessLogger" name="no debe registrar para rutas no sensibles" time="0">
    </testcase>
    <testcase classname="Logger Middleware fileLogger" name="debe registrar operaciones con archivos" time="0.001">
    </testcase>
    <testcase classname="Logger Middleware fileLogger" name="no debe registrar si no hay archivo" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Pruebas del Logger" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.206" tests="4">
    <testcase classname="Pruebas del Logger" name="El logger está definido correctamente" time="0.001">
    </testcase>
    <testcase classname="Pruebas del Logger" name="El logger tiene los métodos necesarios" time="0.001">
    </testcase>
    <testcase classname="Pruebas del Logger" name="El logger puede registrar mensajes sin lanzar errores" time="0.004">
    </testcase>
    <testcase classname="Pruebas del Logger" name="El logger puede registrar objetos complejos sin lanzar errores" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Módulo Logger Base" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.137" tests="6">
    <testcase classname="Módulo Logger Base Inicialización" name="debería crear un logger con configuración por defecto" time="0.005">
    </testcase>
    <testcase classname="Módulo Logger Base Inicialización" name="debería usar level de log desde variable de entorno" time="0.002">
    </testcase>
    <testcase classname="Módulo Logger Base Inicialización" name="debería agregar transport de archivo si se especifica LOG_FILE" time="0.002">
    </testcase>
    <testcase classname="Módulo Logger Base Métodos del Logger" name="el logger debería tener los métodos necesarios" time="0.002">
    </testcase>
    <testcase classname="Módulo Logger Base Métodos del Logger" name="los métodos deberían funcionar sin lanzar errores" time="0.001">
    </testcase>
    <testcase classname="Módulo Logger Base Métodos del Logger" name="los métodos deberían llamar a las funciones correspondientes de winston" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Logger Module" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.124" tests="4">
    <testcase classname="Logger Module" name="debe crear un logger con configuración por defecto" time="0.01">
    </testcase>
    <testcase classname="Logger Module" name="debe usar el nivel de log especificado en LOG_LEVEL" time="0.007">
    </testcase>
    <testcase classname="Logger Module" name="debe agregar transporte de archivo si LOG_FILE está definido" time="0.001">
    </testcase>
    <testcase classname="Logger Module" name="los métodos del logger deben funcionar correctamente" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Logs Controller" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.156" tests="12">
    <testcase classname="Logs Controller getLogs" name="should get logs with default pagination" time="0.014">
    </testcase>
    <testcase classname="Logs Controller getLogs" name="should handle service errors" time="0.002">
    </testcase>
    <testcase classname="Logs Controller getFileSystemLogs" name="should get file system logs" time="0.002">
    </testcase>
    <testcase classname="Logs Controller getFileSystemLogs" name="should handle service errors" time="0.001">
    </testcase>
    <testcase classname="Logs Controller exportLogs" name="should export logs and return file info" time="0.001">
    </testcase>
    <testcase classname="Logs Controller exportLogs" name="should return 401 when user is not authenticated" time="0.001">
    </testcase>
    <testcase classname="Logs Controller exportLogs" name="should handle service errors" time="0.002">
    </testcase>
    <testcase classname="Logs Controller downloadExportedLog" name="should set headers and send file" time="0.002">
    </testcase>
    <testcase classname="Logs Controller downloadExportedLog" name="should return 400 when fileName is missing" time="0.001">
    </testcase>
    <testcase classname="Logs Controller downloadExportedLog" name="should handle service errors" time="0.001">
    </testcase>
    <testcase classname="Logs Controller getSecurityStats" name="should get security statistics" time="0.009">
    </testcase>
    <testcase classname="Logs Controller getSecurityStats" name="should handle service errors" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="Logs Routes" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.143" tests="1">
    <testcase classname="Logs Routes" name="debe configurar middleware de autenticación global" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="Pruebas de Entidad Dosaje" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:22" time="0.651" tests="7">
    <testcase classname="Pruebas de Entidad Dosaje" name="Debería crear un nuevo registro de dosaje" time="0.036">
    </testcase>
    <testcase classname="Pruebas de Entidad Dosaje" name="Debería obtener un registro de dosaje por ID" time="0.006">
    </testcase>
    <testcase classname="Pruebas de Entidad Dosaje" name="Debería obtener un registro de dosaje por número de registro" time="0.007">
    </testcase>
    <testcase classname="Pruebas de Entidad Dosaje" name="Debería actualizar datos de un registro de dosaje" time="0.008">
    </testcase>
    <testcase classname="Pruebas de Entidad Dosaje" name="Debería desactivar un registro de dosaje" time="0.006">
    </testcase>
    <testcase classname="Pruebas de Entidad Dosaje" name="Debería eliminar físicamente un registro de dosaje" time="0.006">
    </testcase>
    <testcase classname="Pruebas de Entidad Dosaje" name="Debería probar el procedimiento almacenado sp_insertar_dosaje" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Input Validation Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.404" tests="12">
    <testcase classname="Input Validation Middleware validateInput" name="debe llamar a next() cuando la validación pasa" time="0.006">
    </testcase>
    <testcase classname="Input Validation Middleware validateInput" name="debe devolver 400 con errores cuando la validación falla" time="0.015">
    </testcase>
    <testcase classname="Input Validation Middleware validateInput" name="debe validar propiedades diferentes de body (query, params)" time="0.003">
    </testcase>
    <testcase classname="Input Validation Middleware validateInput" name="debe manejar errores durante la validación" time="0.002">
    </testcase>
    <testcase classname="Input Validation Middleware validateInput" name="debe validar correctamente con los esquemas comunes" time="0.001">
    </testcase>
    <testcase classname="Input Validation Middleware sanitizeInput" name="debe limpiar (trim) los strings en body, query y params" time="0.001">
    </testcase>
    <testcase classname="Input Validation Middleware sanitizeInput" name="debe manejar objetos vacíos o nulos" time="0.001">
    </testcase>
    <testcase classname="Input Validation Middleware sanitizeInput" name="debe manejar errores durante sanitización" time="0.001">
    </testcase>
    <testcase classname="Input Validation Middleware validateFileType" name="debe permitir tipos de archivo válidos" time="0.003">
    </testcase>
    <testcase classname="Input Validation Middleware validateFileType" name="debe rechazar tipos de archivo no permitidos" time="0.002">
    </testcase>
    <testcase classname="Input Validation Middleware validateFileType" name="debe pasar si no hay archivo" time="0.001">
    </testcase>
    <testcase classname="Input Validation Middleware validateFileType" name="debe manejar errores durante la validación" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Notification Routes" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.121" tests="3">
    <testcase classname="Notification Routes" name="debe configurar rutas GET para obtener notificaciones" time="0.007">
    </testcase>
    <testcase classname="Notification Routes" name="debe configurar ruta PATCH para marcar notificaciones como leídas" time="0.003">
    </testcase>
    <testcase classname="Notification Routes" name="debe configurar ruta DELETE para eliminar notificaciones" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Notification Controller" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.163" tests="21">
    <testcase classname="Notification Controller getUserNotifications" name="should get user notifications successfully" time="0.002">
    </testcase>
    <testcase classname="Notification Controller getUserNotifications" name="should handle errors" time="0.002">
    </testcase>
    <testcase classname="Notification Controller getNotificationById" name="should get notification by id successfully" time="0.001">
    </testcase>
    <testcase classname="Notification Controller getNotificationById" name="should return 400 when id is missing" time="0.001">
    </testcase>
    <testcase classname="Notification Controller getNotificationById" name="should handle errors" time="0.002">
    </testcase>
    <testcase classname="Notification Controller markAsRead" name="should mark notification as read successfully" time="0.001">
    </testcase>
    <testcase classname="Notification Controller markAsRead" name="should return 400 when id is missing" time="0.001">
    </testcase>
    <testcase classname="Notification Controller markAsRead" name="should handle errors" time="0.001">
    </testcase>
    <testcase classname="Notification Controller markAllAsRead" name="should mark all notifications as read successfully" time="0.001">
    </testcase>
    <testcase classname="Notification Controller markAllAsRead" name="should return 400 when userId is missing" time="0.003">
    </testcase>
    <testcase classname="Notification Controller markAllAsRead" name="should handle errors" time="0.001">
    </testcase>
    <testcase classname="Notification Controller deleteNotification" name="should delete notification successfully" time="0.001">
    </testcase>
    <testcase classname="Notification Controller deleteNotification" name="should return 400 when id is missing" time="0.001">
    </testcase>
    <testcase classname="Notification Controller deleteNotification" name="should handle errors" time="0.002">
    </testcase>
    <testcase classname="Notification Controller getNotificationSettings" name="should get notification settings successfully" time="0.002">
    </testcase>
    <testcase classname="Notification Controller getNotificationSettings" name="should return 400 when userId is missing" time="0.001">
    </testcase>
    <testcase classname="Notification Controller getNotificationSettings" name="should handle errors" time="0.001">
    </testcase>
    <testcase classname="Notification Controller updateNotificationSettings" name="should update notification settings successfully" time="0.001">
    </testcase>
    <testcase classname="Notification Controller updateNotificationSettings" name="should return 400 when userId is missing" time="0.001">
    </testcase>
    <testcase classname="Notification Controller updateNotificationSettings" name="should return 400 when no settings to update" time="0.002">
    </testcase>
    <testcase classname="Notification Controller updateNotificationSettings" name="should handle errors" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Logs Service" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.29" tests="32">
    <testcase classname="Logs Service getLogs" name="debe recuperar logs con los filtros predeterminados" time="0.004">
    </testcase>
    <testcase classname="Logs Service getLogs" name="debe aplicar filtros de tipo correctamente" time="0.001">
    </testcase>
    <testcase classname="Logs Service getLogs" name="debe aplicar filtros de fecha correctamente" time="0.001">
    </testcase>
    <testcase classname="Logs Service getLogs" name="debe manejar errores correctamente" time="0.031">
    </testcase>
    <testcase classname="Logs Service getLogs" name="debe manejar todos los tipos de logs disponibles" time="0.005">
    </testcase>
    <testcase classname="Logs Service getSecurityStats" name="debe recuperar estadísticas de seguridad" time="0.003">
    </testcase>
    <testcase classname="Logs Service getSecurityStats" name="debe aplicar filtros de fecha en estadísticas" time="0.001">
    </testcase>
    <testcase classname="Logs Service getSecurityStats" name="debe manejar errores en estadísticas correctamente" time="0.001">
    </testcase>
    <testcase classname="Logs Service getSecurityStats" name="debe manejar el caso donde solo se especifica fechaFin" time="0.001">
    </testcase>
    <testcase classname="Logs Service getFileSystemLogs" name="debe recuperar logs de archivos con filtros predeterminados" time="0.002">
    </testcase>
    <testcase classname="Logs Service getFileSystemLogs" name="debe aplicar filtros de tipo correctamente para logs de archivos" time="0.001">
    </testcase>
    <testcase classname="Logs Service getFileSystemLogs" name="debe manejar otros tipos de logs correctamente" time="0.006">
    </testcase>
    <testcase classname="Logs Service getFileSystemLogs" name="debe manejar paginación correctamente" time="0.001">
    </testcase>
    <testcase classname="Logs Service getFileSystemLogs" name="debe manejar archivos inexistentes" time="0.001">
    </testcase>
    <testcase classname="Logs Service getFileSystemLogs" name="debe manejar errores en la lectura de archivos" time="0.002">
    </testcase>
    <testcase classname="Logs Service getFileSystemLogs" name="debe manejar errores de parseo JSON" time="0.001">
    </testcase>
    <testcase classname="Logs Service exportLogs" name="debe exportar logs en formato JSON" time="0.002">
    </testcase>
    <testcase classname="Logs Service exportLogs" name="debe exportar logs en formato CSV" time="0.001">
    </testcase>
    <testcase classname="Logs Service exportLogs" name="debe manejar la exportación de logs vacíos en CSV" time="0.001">
    </testcase>
    <testcase classname="Logs Service exportLogs" name="debe manejar errores en la exportación" time="0.001">
    </testcase>
    <testcase classname="Logs Service exportLogs" name="debe manejar parámetros de fecha correctamente" time="0.016">
    </testcase>
    <testcase classname="Logs Service exportLogs" name="debe manejar errores críticos de sistema de archivos" time="0.006">
    </testcase>
    <testcase classname="Logs Service downloadExportedLog" name="debe obtener información para descargar un archivo exportado" time="0.008">
    </testcase>
    <testcase classname="Logs Service downloadExportedLog" name="debe detectar el tipo de contenido correctamente" time="0.001">
    </testcase>
    <testcase classname="Logs Service downloadExportedLog" name="debe lanzar error si el archivo no existe" time="0.001">
    </testcase>
    <testcase classname="Logs Service downloadExportedLog" name="debe manejar errores al obtener información del archivo" time="0.002">
    </testcase>
    <testcase classname="CSV String Formatting" name="debe formatear correctamente valores string y no-string en CSV" time="0.001">
    </testcase>
    <testcase classname="CSV String Formatting" name="debe generar contenido CSV correctamente con múltiples registros" time="0.003">
    </testcase>
    <testcase classname="CSV String Formatting Logic Test" name="convierte registros a CSV con comillas escapadas" time="0.002">
    </testcase>
    <testcase classname="CSV String Formatting Logic Test" name="convierte múltiples registros a formato CSV correcto" time="0.001">
    </testcase>
    <testcase classname="CSV String Formatting Logic Test" name="maneja tipos de datos variados en formato CSV" time="0.001">
    </testcase>
    <testcase classname="exportLogs Error Handling Logic" name="formatea mensajes de error con información adicional" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Pruebas de Entidad ForenseDigital" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.703" tests="7">
    <testcase classname="Pruebas de Entidad ForenseDigital" name="Debería crear un nuevo registro forense digital" time="0.009">
    </testcase>
    <testcase classname="Pruebas de Entidad ForenseDigital" name="Debería obtener un registro forense digital por ID" time="0.005">
    </testcase>
    <testcase classname="Pruebas de Entidad ForenseDigital" name="Debería obtener un registro forense digital por número de registro" time="0.003">
    </testcase>
    <testcase classname="Pruebas de Entidad ForenseDigital" name="Debería actualizar datos de un registro forense digital" time="0.006">
    </testcase>
    <testcase classname="Pruebas de Entidad ForenseDigital" name="Debería desactivar un registro forense digital" time="0.008">
    </testcase>
    <testcase classname="Pruebas de Entidad ForenseDigital" name="Debería eliminar físicamente un registro forense digital" time="0.007">
    </testcase>
    <testcase classname="Pruebas de Entidad ForenseDigital" name="Debería probar el procedimiento almacenado sp_insertar_forense_digital" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="Mesa Partes Routes" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.323" tests="1">
    <testcase classname="Mesa Partes Routes" name="debe configurar rutas GET para listar y obtener mesas de partes" time="0.175">
    </testcase>
  </testsuite>
  <testsuite name="Pruebas de Papelera de Reciclaje" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.282" tests="4">
    <testcase classname="Pruebas de Papelera de Reciclaje" name="Debería mover un documento a la papelera" time="0">
    </testcase>
    <testcase classname="Pruebas de Papelera de Reciclaje" name="Debería restaurar un documento de la papelera" time="0">
    </testcase>
    <testcase classname="Pruebas de Papelera de Reciclaje" name="Debería mover nuevamente a papelera y eliminar permanentemente" time="0.001">
    </testcase>
    <testcase classname="Pruebas de Papelera de Reciclaje" name="Debería comprobar permiso contextual para eliminar documento" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Pruebas de Entidad MesaPartes" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.399" tests="7">
    <testcase classname="Pruebas de Entidad MesaPartes" name="Debería crear una nueva mesa de partes" time="0.007">
    </testcase>
    <testcase classname="Pruebas de Entidad MesaPartes" name="Debería obtener una mesa de partes por ID" time="0.003">
    </testcase>
    <testcase classname="Pruebas de Entidad MesaPartes" name="Debería obtener una mesa de partes por código de identificación" time="0.003">
    </testcase>
    <testcase classname="Pruebas de Entidad MesaPartes" name="Debería actualizar datos de una mesa de partes" time="0.006">
    </testcase>
    <testcase classname="Pruebas de Entidad MesaPartes" name="Debería desactivar una mesa de partes" time="0.007">
    </testcase>
    <testcase classname="Pruebas de Entidad MesaPartes" name="Debería eliminar físicamente una mesa de partes" time="0.008">
    </testcase>
    <testcase classname="Pruebas de Entidad MesaPartes" name="Debería listar todas las mesas de partes activas" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Permisos Controller" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.171" tests="13">
    <testcase classname="Permisos Controller obtenerPermisosContextuales" name="should get all permisos contextuales with default pagination" time="0.002">
    </testcase>
    <testcase classname="Permisos Controller obtenerPermisosContextuales" name="should handle database errors" time="0.001">
    </testcase>
    <testcase classname="Permisos Controller obtenerPermisoContextualPorId" name="should get a permiso contextual by id and return 200 status" time="0.001">
    </testcase>
    <testcase classname="Permisos Controller obtenerPermisoContextualPorId" name="should return 404 if permiso contextual not found" time="0.001">
    </testcase>
    <testcase classname="Permisos Controller obtenerPermisoContextualPorId" name="should return 400 for invalid id" time="0.001">
    </testcase>
    <testcase classname="Permisos Controller obtenerPermisoContextualPorId" name="should handle database errors" time="0.001">
    </testcase>
    <testcase classname="Permisos Controller crearPermisoContextual" name="should create a new permiso contextual and return 201 status" time="0.001">
    </testcase>
    <testcase classname="Permisos Controller crearPermisoContextual" name="should return 400 when missing required fields" time="0.001">
    </testcase>
    <testcase classname="Permisos Controller crearPermisoContextual" name="should return 409 when permiso already exists" time="0.001">
    </testcase>
    <testcase classname="Permisos Controller crearPermisoContextual" name="should handle database errors" time="0.001">
    </testcase>
    <testcase classname="Permisos Controller getPermissionBits" name="should calculate permission bits correctly" time="0.001">
    </testcase>
    <testcase classname="Permisos Controller getPermissionBits" name="should return 400 when missing permissions array" time="0">
    </testcase>
    <testcase classname="Permisos Controller getPermissionBits" name="should handle service errors" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Permissions Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.145" tests="14">
    <testcase classname="Permissions Middleware validatePermissions" name="debe permitir acceso cuando el usuario tiene todos los permisos requeridos" time="0.006">
    </testcase>
    <testcase classname="Permissions Middleware validatePermissions" name="debe rechazar acceso cuando el usuario no tiene todos los permisos requeridos" time="0.001">
    </testcase>
    <testcase classname="Permissions Middleware validatePermissions" name="debe rechazar acceso cuando el usuario no está autenticado" time="0">
    </testcase>
    <testcase classname="Permissions Middleware validatePermissions" name="debe manejar errores durante la validación" time="0.007">
    </testcase>
    <testcase classname="Permissions Middleware validatePermissions" name="debe usar permisos por defecto basados en rol cuando no hay permisos específicos" time="0.001">
    </testcase>
    <testcase classname="Permissions Middleware validateRoles" name="debe permitir acceso cuando el usuario tiene un rol permitido" time="0">
    </testcase>
    <testcase classname="Permissions Middleware validateRoles" name="debe rechazar acceso cuando el usuario no tiene un rol permitido" time="0.001">
    </testcase>
    <testcase classname="Permissions Middleware validateRoles" name="debe rechazar acceso cuando el usuario no está autenticado" time="0">
    </testcase>
    <testcase classname="Permissions Middleware validateRoles" name="debe manejar errores durante la validación de roles" time="0.001">
    </testcase>
    <testcase classname="Permissions Middleware validateResourcePermissions" name="debe permitir acceso cuando el recurso no tiene permisos definidos" time="0.001">
    </testcase>
    <testcase classname="Permissions Middleware validateResourcePermissions" name="debe permitir acceso cuando el usuario tiene los permisos necesarios para el recurso" time="0.001">
    </testcase>
    <testcase classname="Permissions Middleware validateResourcePermissions" name="debe registrar advertencias cuando falta un permiso necesario" time="0.001">
    </testcase>
    <testcase classname="Permissions Middleware validateResourcePermissions" name="debe usar el parámetro resource si está disponible" time="0">
    </testcase>
    <testcase classname="Permissions Middleware validateResourcePermissions" name="debe manejar errores durante la validación de permisos por recurso" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Pruebas de Entidad QuimicaToxicologiaForense" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.318" tests="6">
    <testcase classname="Pruebas de Entidad QuimicaToxicologiaForense" name="Debería crear un nuevo registro químico/toxicológico" time="0.028">
    </testcase>
    <testcase classname="Pruebas de Entidad QuimicaToxicologiaForense" name="Debería obtener un registro químico/toxicológico por ID" time="0.005">
    </testcase>
    <testcase classname="Pruebas de Entidad QuimicaToxicologiaForense" name="Debería obtener un registro químico/toxicológico por número de registro" time="0.002">
    </testcase>
    <testcase classname="Pruebas de Entidad QuimicaToxicologiaForense" name="Debería actualizar datos de un registro químico/toxicológico" time="0.007">
    </testcase>
    <testcase classname="Pruebas de Entidad QuimicaToxicologiaForense" name="Debería desactivar un registro químico/toxicológico" time="0.005">
    </testcase>
    <testcase classname="Pruebas de Entidad QuimicaToxicologiaForense" name="Debería eliminar físicamente un registro químico/toxicológico" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Pruebas de Entidad PermisoContextual" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.672" tests="5">
    <testcase classname="Pruebas de Entidad PermisoContextual" name="Debería crear un nuevo permiso contextual" time="0.006">
    </testcase>
    <testcase classname="Pruebas de Entidad PermisoContextual" name="Debería obtener un permiso contextual por ID" time="0.004">
    </testcase>
    <testcase classname="Pruebas de Entidad PermisoContextual" name="Debería obtener permisos contextuales a través de la vista" time="0.006">
    </testcase>
    <testcase classname="Pruebas de Entidad PermisoContextual" name="Debería actualizar un permiso contextual" time="0.006">
    </testcase>
    <testcase classname="Pruebas de Entidad PermisoContextual" name="Debería eliminar un permiso contextual" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Rate Limiting Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.358" tests="6">
    <testcase classname="Rate Limiting Middleware Rate Limit Configuration" name="should configure standard limiter with correct window and max" time="0.178">
    </testcase>
    <testcase classname="Rate Limiting Middleware Rate Limit Configuration" name="should configure auth limiter with correct window and max" time="0.025">
    </testcase>
    <testcase classname="Rate Limiting Middleware Standard Rate Limiter" name="should allow requests within limit" time="0.04">
    </testcase>
    <testcase classname="Rate Limiting Middleware Standard Rate Limiter" name="should block requests exceeding limit" time="0.002">
    </testcase>
    <testcase classname="Rate Limiting Middleware Auth Rate Limiter" name="should allow auth requests within limit" time="0.001">
    </testcase>
    <testcase classname="Rate Limiting Middleware Auth Rate Limiter" name="should block auth requests exceeding limit" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Role Routes" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:24" time="0.099" tests="1">
    <testcase classname="Role Routes" name="debe configurar ruta GET / para obtener todos los roles" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Security Routes" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:24" time="0.143" tests="1">
    <testcase classname="Security Routes" name="debe configurar rutas de seguridad y administración" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Security Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:24" time="0.151" tests="5">
    <testcase classname="Security Middleware sanitizeData" name="should sanitize malicious scripts in request body" time="0.003">
    </testcase>
    <testcase classname="Security Middleware sanitizeData" name="should sanitize malicious scripts in query parameters" time="0.001">
    </testcase>
    <testcase classname="Security Middleware sanitizeData" name="should sanitize nested objects in body" time="0.001">
    </testcase>
    <testcase classname="Security Middleware validateHeaders" name="should add security headers to response" time="0.049">
    </testcase>
    <testcase classname="Security Middleware validateHeaders" name="should return 400 status for invalid content type" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Role Controller" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:24" time="0.151" tests="20">
    <testcase classname="Role Controller getAllRoles" name="should get all roles with default pagination" time="0.01">
    </testcase>
    <testcase classname="Role Controller getAllRoles" name="should handle database errors" time="0.001">
    </testcase>
    <testcase classname="Role Controller getRoleById" name="should get a role by id and return 200 status" time="0.001">
    </testcase>
    <testcase classname="Role Controller getRoleById" name="should return 404 if role not found" time="0.001">
    </testcase>
    <testcase classname="Role Controller getRoleById" name="should return 400 for invalid id" time="0.001">
    </testcase>
    <testcase classname="Role Controller getRoleById" name="should handle database errors" time="0.001">
    </testcase>
    <testcase classname="Role Controller createRole" name="should create a new role and return 201 status" time="0.002">
    </testcase>
    <testcase classname="Role Controller createRole" name="should return 400 when missing required fields" time="0.002">
    </testcase>
    <testcase classname="Role Controller createRole" name="should return 409 when role already exists" time="0.001">
    </testcase>
    <testcase classname="Role Controller createRole" name="should handle database errors" time="0.001">
    </testcase>
    <testcase classname="Role Controller updateRole" name="should update a role and return 200 status" time="0.001">
    </testcase>
    <testcase classname="Role Controller updateRole" name="should return 400 for invalid id" time="0.001">
    </testcase>
    <testcase classname="Role Controller updateRole" name="should return 400 when no fields to update" time="0.002">
    </testcase>
    <testcase classname="Role Controller updateRole" name="should return 404 if role not found" time="0.001">
    </testcase>
    <testcase classname="Role Controller updateRole" name="should handle database errors" time="0.001">
    </testcase>
    <testcase classname="Role Controller deleteRole" name="should delete a role and return 200 status" time="0.001">
    </testcase>
    <testcase classname="Role Controller deleteRole" name="should return 400 for invalid id" time="0">
    </testcase>
    <testcase classname="Role Controller deleteRole" name="should return 404 if role not found" time="0">
    </testcase>
    <testcase classname="Role Controller deleteRole" name="should return 409 if role has associated users" time="0.001">
    </testcase>
    <testcase classname="Role Controller deleteRole" name="should handle database errors" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="Security Controller" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:24" time="0.197" tests="17">
    <testcase classname="Security Controller getAuditLogs" name="should get audit logs successfully" time="0.021">
    </testcase>
    <testcase classname="Security Controller getAuditLogs" name="should handle errors" time="0.001">
    </testcase>
    <testcase classname="Security Controller getSecurityEvents" name="should get security events successfully" time="0.001">
    </testcase>
    <testcase classname="Security Controller getSecurityEvents" name="should handle errors" time="0.001">
    </testcase>
    <testcase classname="Security Controller securityStatus" name="should get security status successfully" time="0.001">
    </testcase>
    <testcase classname="Security Controller securityStatus" name="should handle errors" time="0.001">
    </testcase>
    <testcase classname="Security Controller passwordPolicy" name="should get password policy successfully" time="0.001">
    </testcase>
    <testcase classname="Security Controller passwordPolicy" name="should handle errors" time="0">
    </testcase>
    <testcase classname="Security Controller updatePasswordPolicy" name="should update password policy successfully" time="0.002">
    </testcase>
    <testcase classname="Security Controller updatePasswordPolicy" name="should return 403 when user is not admin" time="0.001">
    </testcase>
    <testcase classname="Security Controller updatePasswordPolicy" name="should handle errors" time="0">
    </testcase>
    <testcase classname="Security Controller securitySettings" name="should get security settings successfully" time="0.001">
    </testcase>
    <testcase classname="Security Controller securitySettings" name="should handle errors" time="0">
    </testcase>
    <testcase classname="Security Controller updateSecuritySettings" name="should update security settings successfully" time="0.002">
    </testcase>
    <testcase classname="Security Controller updateSecuritySettings" name="should return 403 when user is not admin" time="0">
    </testcase>
    <testcase classname="Security Controller updateSecuritySettings" name="should return 400 when no settings to update" time="0.004">
    </testcase>
    <testcase classname="Security Controller updateSecuritySettings" name="should handle errors" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Permisos Service" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="0.402" tests="44">
    <testcase classname="Permisos Service getPermisosContextuales" name="debe retornar todos los permisos contextuales" time="0.002">
    </testcase>
    <testcase classname="Permisos Service getPermisosContextuales" name="debe manejar errores al obtener permisos contextuales" time="0.005">
    </testcase>
    <testcase classname="Permisos Service getPermisoContextualById" name="debe retornar un permiso contextual por su ID" time="0.001">
    </testcase>
    <testcase classname="Permisos Service getPermisoContextualById" name="debe lanzar error si el permiso no existe" time="0.032">
    </testcase>
    <testcase classname="Permisos Service getPermisosContextualesFiltrados" name="debe retornar permisos filtrados por rol" time="0.002">
    </testcase>
    <testcase classname="Permisos Service getPermisosContextualesFiltrados" name="debe retornar permisos filtrados por área" time="0.001">
    </testcase>
    <testcase classname="Permisos Service getPermisosContextualesFiltrados" name="debe retornar permisos filtrados por tipo de recurso" time="0.001">
    </testcase>
    <testcase classname="Permisos Service getPermisosContextualesFiltrados" name="debe retornar permisos con múltiples filtros" time="0">
    </testcase>
    <testcase classname="Permisos Service getPermisosContextualesFiltrados" name="debe manejar errores al filtrar permisos" time="0.001">
    </testcase>
    <testcase classname="Permisos Service crearPermisoContextual" name="debe crear un permiso contextual con objeto de regla" time="0.001">
    </testcase>
    <testcase classname="Permisos Service crearPermisoContextual" name="debe crear un permiso contextual con string de regla" time="0.003">
    </testcase>
    <testcase classname="Permisos Service crearPermisoContextual" name="debe manejar errores al crear permiso" time="0.002">
    </testcase>
    <testcase classname="Permisos Service actualizarPermisoContextual" name="debe actualizar todos los campos de un permiso" time="0.001">
    </testcase>
    <testcase classname="Permisos Service actualizarPermisoContextual" name="debe actualizar campos selectivos de un permiso" time="0.001">
    </testcase>
    <testcase classname="Permisos Service actualizarPermisoContextual" name="debe actualizar reglaContexto como string" time="0.001">
    </testcase>
    <testcase classname="Permisos Service actualizarPermisoContextual" name="debe lanzar error si no hay datos para actualizar" time="0.001">
    </testcase>
    <testcase classname="Permisos Service actualizarPermisoContextual" name="debe lanzar error si el permiso no existe" time="0.001">
    </testcase>
    <testcase classname="Permisos Service actualizarPermisoContextual" name="debe manejar errores de base de datos" time="0.001">
    </testcase>
    <testcase classname="Permisos Service eliminarPermisoContextual" name="debe eliminar un permiso contextual exitosamente" time="0.001">
    </testcase>
    <testcase classname="Permisos Service eliminarPermisoContextual" name="debe lanzar error si el permiso no existe" time="0.001">
    </testcase>
    <testcase classname="Permisos Service eliminarPermisoContextual" name="debe manejar errores de base de datos" time="0.001">
    </testcase>
    <testcase classname="Permisos Service verificarPermisoContextual" name="debe retornar true cuando el usuario tiene permiso" time="0.001">
    </testcase>
    <testcase classname="Permisos Service verificarPermisoContextual" name="debe retornar false cuando el usuario no tiene permiso" time="0">
    </testcase>
    <testcase classname="Permisos Service verificarPermisoContextual" name="debe manejar errores y retornar false" time="0.001">
    </testcase>
    <testcase classname="Permisos Service gestionarPapelera" name="debe mover un documento a la papelera exitosamente" time="0.001">
    </testcase>
    <testcase classname="Permisos Service gestionarPapelera" name="debe restaurar un documento de la papelera exitosamente" time="0">
    </testcase>
    <testcase classname="Permisos Service gestionarPapelera" name="debe eliminar permanentemente un documento exitosamente" time="0.001">
    </testcase>
    <testcase classname="Permisos Service gestionarPapelera" name="debe manejar errores al gestionar papelera" time="0.001">
    </testcase>
    <testcase classname="Permisos Service getUsuarioInfo" name="debe retornar información del usuario" time="0.001">
    </testcase>
    <testcase classname="Permisos Service getUsuarioInfo" name="debe retornar null si el usuario no existe" time="0">
    </testcase>
    <testcase classname="Permisos Service getUsuarioInfo" name="debe manejar errores al obtener información del usuario" time="0.001">
    </testcase>
    <testcase classname="Permisos Service getPermisosBits" name="debe retornar permisos bits para un rol" time="0.001">
    </testcase>
    <testcase classname="Permisos Service getPermisosBits" name="debe lanzar error si el rol no existe" time="0">
    </testcase>
    <testcase classname="Permisos Service getPermisosBits" name="debe manejar errores al obtener permisos bits" time="0.001">
    </testcase>
    <testcase classname="Permisos Service getPermisosContextualesUsuario" name="debe retornar permisos contextuales del usuario" time="0.001">
    </testcase>
    <testcase classname="Permisos Service getPermisosContextualesUsuario" name="debe retornar array vacío si no hay permisos" time="0">
    </testcase>
    <testcase classname="Permisos Service getPermisosContextualesUsuario" name="debe manejar errores y retornar array vacío" time="0.007">
    </testcase>
    <testcase classname="Permisos Service getPermissionBits" name="debe retornar la descripción de los bits de permisos" time="0.001">
    </testcase>
    <testcase classname="Permisos Service verifyPermission" name="debe verificar si un usuario tiene permiso" time="0.001">
    </testcase>
    <testcase classname="Permisos Service verifyPermission" name="debe indicar cuando un usuario no tiene permiso" time="0.001">
    </testcase>
    <testcase classname="Permisos Service verifyPermission" name="debe manejar el caso cuando faltan parámetros" time="0">
    </testcase>
    <testcase classname="Permisos Service verifyPermission" name="debe manejar el caso cuando el usuario no existe" time="0">
    </testcase>
    <testcase classname="Permisos Service verifyPermission" name="debe manejar el caso cuando el rol no existe" time="0.001">
    </testcase>
    <testcase classname="Permisos Service verifyPermission" name="debe manejar errores generales" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Session Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:24" time="0.156" tests="19">
    <testcase classname="Session Middleware sessionConfig" name="debe tener una configuración válida" time="0.001">
    </testcase>
    <testcase classname="Session Middleware sessionConfig" name="debe configurar secure cookie en producción" time="0.001">
    </testcase>
    <testcase classname="Session Middleware validateSession" name="debe llamar a next cuando la sesión es válida" time="0.002">
    </testcase>
    <testcase classname="Session Middleware validateSession" name="debe devolver 401 cuando no hay sesión" time="0.001">
    </testcase>
    <testcase classname="Session Middleware validateSession" name="debe devolver 401 cuando la sesión no existe en Redis" time="0.001">
    </testcase>
    <testcase classname="Session Middleware validateSession" name="debe manejar errores de Redis" time="0.001">
    </testcase>
    <testcase classname="Session Middleware validateSession" name="debe manejar excepciones" time="0.001">
    </testcase>
    <testcase classname="Session Middleware regenerateSession" name="debe regenerar la sesión y llamar a next" time="0.002">
    </testcase>
    <testcase classname="Session Middleware regenerateSession" name="debe continuar si no hay regenerate en la sesión" time="0">
    </testcase>
    <testcase classname="Session Middleware regenerateSession" name="debe manejar errores en regenerate" time="0.001">
    </testcase>
    <testcase classname="Session Middleware regenerateSession" name="debe manejar excepciones" time="0.001">
    </testcase>
    <testcase classname="Session Middleware clearSession" name="debe destruir la sesión y limpiar la cookie" time="0.001">
    </testcase>
    <testcase classname="Session Middleware clearSession" name="debe continuar si no hay sesión" time="0">
    </testcase>
    <testcase classname="Session Middleware clearSession" name="debe manejar errores en destroy" time="0.001">
    </testcase>
    <testcase classname="Session Middleware clearSession" name="debe manejar excepciones" time="0.001">
    </testcase>
    <testcase classname="Session Middleware checkMultipleSessions" name="debe continuar si no hay sesión" time="0">
    </testcase>
    <testcase classname="Session Middleware checkMultipleSessions" name="debe detectar múltiples sesiones y devolver 401" time="0.002">
    </testcase>
    <testcase classname="Session Middleware checkMultipleSessions" name="debe manejar errores al verificar múltiples sesiones" time="0.001">
    </testcase>
    <testcase classname="Session Middleware checkMultipleSessions" name="debe manejar excepciones" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Session Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:24" time="0.152" tests="13">
    <testcase classname="Session Middleware validateSession" name="debe permitir el acceso cuando la sesión es válida" time="0.003">
    </testcase>
    <testcase classname="Session Middleware validateSession" name="debe retornar 401 cuando no hay sesión" time="0.003">
    </testcase>
    <testcase classname="Session Middleware validateSession" name="debe retornar 401 cuando no hay usuario en la sesión" time="0.001">
    </testcase>
    <testcase classname="Session Middleware validateSession" name="debe retornar 401 cuando la sesión no se encuentra en Redis" time="0.002">
    </testcase>
    <testcase classname="Session Middleware validateSession" name="debe manejar errores al verificar sesión" time="0.002">
    </testcase>
    <testcase classname="Session Middleware regenerateSession" name="debe regenerar la sesión correctamente" time="0.001">
    </testcase>
    <testcase classname="Session Middleware regenerateSession" name="debe pasar al siguiente middleware si no hay método regenerate" time="0">
    </testcase>
    <testcase classname="Session Middleware regenerateSession" name="debe manejar errores durante la regeneración" time="0.001">
    </testcase>
    <testcase classname="Session Middleware regenerateSession" name="debe pasar al siguiente middleware si hay un error general" time="0.001">
    </testcase>
    <testcase classname="Session Middleware clearSession" name="debe limpiar la sesión correctamente" time="0.001">
    </testcase>
    <testcase classname="Session Middleware clearSession" name="debe pasar al siguiente middleware si no hay sesión" time="0">
    </testcase>
    <testcase classname="Session Middleware clearSession" name="debe manejar errores durante la limpieza" time="0.007">
    </testcase>
    <testcase classname="Session Middleware clearSession" name="debe pasar al siguiente middleware si hay un error general" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Swagger Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:24" time="0.117" tests="6">
    <testcase classname="Swagger Middleware swaggerMiddleware" name="debe ser el middleware de swagger-ui-express" time="0.002">
    </testcase>
    <testcase classname="Swagger Middleware swaggerUiMiddleware" name="debe ser generado por swagger-ui-express.setup" time="0.001">
    </testcase>
    <testcase classname="Swagger Middleware validateSwagger" name="debe continuar cuando no hay errores de validación" time="0.001">
    </testcase>
    <testcase classname="Swagger Middleware validateSwagger" name="debe responder con error 500 cuando hay errores de validación" time="0.001">
    </testcase>
    <testcase classname="Swagger Middleware validateSwagger" name="debe manejar excepciones y continuar" time="0.001">
    </testcase>
    <testcase classname="Swagger Middleware logSwaggerAccess" name="debe registrar acceso a la documentación" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="User Controller" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:24" time="0.111" tests="11">
    <testcase classname="User Controller getAllUsers" name="should get all users with default pagination" time="0.003">
    </testcase>
    <testcase classname="User Controller getAllUsers" name="should apply search filters when provided" time="0.001">
    </testcase>
    <testcase classname="User Controller getAllUsers" name="should handle database errors" time="0.002">
    </testcase>
    <testcase classname="User Controller getUserById" name="should get a user by id and return 200 status" time="0.002">
    </testcase>
    <testcase classname="User Controller getUserById" name="should return 404 if user not found" time="0.001">
    </testcase>
    <testcase classname="User Controller getUserById" name="should return 400 for invalid id" time="0.001">
    </testcase>
    <testcase classname="User Controller getUserById" name="should handle database errors" time="0.001">
    </testcase>
    <testcase classname="User Controller createUser" name="should create a new user and return 201 status" time="0.003">
    </testcase>
    <testcase classname="User Controller createUser" name="should return 400 when missing required fields" time="0.001">
    </testcase>
    <testcase classname="User Controller createUser" name="should return 409 when user already exists" time="0.001">
    </testcase>
    <testcase classname="User Controller createUser" name="should handle database errors" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Permisos Routes" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="1.168" tests="7">
    <testcase classname="Permisos Routes" name="debe configurar rutas GET para listar y obtener permisos" time="0.414">
    </testcase>
    <testcase classname="Permisos Routes" name="debe configurar rutas POST para crear permisos" time="0.143">
    </testcase>
    <testcase classname="Permisos Routes" name="debe configurar rutas PUT para actualizar permisos" time="0.106">
    </testcase>
    <testcase classname="Permisos Routes" name="debe configurar rutas DELETE para eliminar permisos" time="0.105">
    </testcase>
    <testcase classname="Permisos Routes" name="debe configurar ruta POST para asignar permisos a roles" time="0.091">
    </testcase>
    <testcase classname="Permisos Routes" name="debe configurar ruta DELETE para eliminar permisos de roles" time="0.079">
    </testcase>
    <testcase classname="Permisos Routes" name="debe configurar middleware de autenticación y validación" time="0.1">
    </testcase>
  </testsuite>
  <testsuite name="User Routes" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:24" time="0.384" tests="6">
    <testcase classname="User Routes" name="debe configurar ruta GET / para obtener todos los usuarios" time="0.168">
    </testcase>
    <testcase classname="User Routes" name="debe configurar rutas POST para crear usuarios" time="0.023">
    </testcase>
    <testcase classname="User Routes" name="debe configurar rutas PUT para actualizar usuarios" time="0.02">
    </testcase>
    <testcase classname="User Routes" name="debe configurar rutas DELETE para eliminar usuarios" time="0.025">
    </testcase>
    <testcase classname="User Routes" name="debe configurar rutas para operaciones con perfiles de usuario" time="0.022">
    </testcase>
    <testcase classname="User Routes" name="debe configurar middleware de autenticación y validación" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="Pruebas de Entidad Usuario" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:24" time="0.391" tests="5">
    <testcase classname="Pruebas de Entidad Usuario" name="Debería crear un nuevo usuario" time="0.067">
    </testcase>
    <testcase classname="Pruebas de Entidad Usuario" name="Debería obtener un usuario por ID" time="0.003">
    </testcase>
    <testcase classname="Pruebas de Entidad Usuario" name="Debería obtener un usuario por CodigoCIP" time="0.002">
    </testcase>
    <testcase classname="Pruebas de Entidad Usuario" name="Debería actualizar datos de usuario" time="0.007">
    </testcase>
    <testcase classname="Pruebas de Entidad Usuario" name="Debería eliminar un usuario" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="Pruebas de autenticación" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:21" time="3.597" tests="5">
    <testcase classname="Pruebas de autenticación" name="Debería rechazar un login con credenciales inválidas" time="0.195">
    </testcase>
    <testcase classname="Pruebas de autenticación" name="Debería procesar un login con credenciales válidas" time="0.049">
    </testcase>
    <testcase classname="Pruebas de autenticación" name="Debería procesar solicitud de refresh token" time="0.017">
    </testcase>
    <testcase classname="Pruebas de autenticación" name="Debería procesar verificación de autenticación" time="0.039">
    </testcase>
    <testcase classname="Pruebas de autenticación" name="Debería procesar cierre de sesión" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="Validation Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:24" time="0.627" tests="5">
    <testcase classname="Validation Middleware validate (Express Validator)" name="should call next() when validation passes" time="0.012">
    </testcase>
    <testcase classname="Validation Middleware validate (Express Validator)" name="should return 400 with error messages when validation fails" time="0.005">
    </testcase>
    <testcase classname="Validation Middleware validateSchema (Joi)" name="should call next() when validation passes" time="0.008">
    </testcase>
    <testcase classname="Validation Middleware validateSchema (Joi)" name="should return 400 with error messages when validation fails" time="0.008">
    </testcase>
    <testcase classname="Validation Middleware validateSchema (Joi)" name="should sanitize data by removing unknown fields" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Validation Middleware - Comprehensive Tests" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:24" time="0.729" tests="15">
    <testcase classname="Validation Middleware - Comprehensive Tests Base validation middleware" name="validateSchema() should call next() when Joi validation passes" time="0.004">
    </testcase>
    <testcase classname="Validation Middleware - Comprehensive Tests Base validation middleware" name="validateSchema() should return 400 when Joi validation fails" time="0.004">
    </testcase>
    <testcase classname="Validation Middleware - Comprehensive Tests Base validation middleware" name="validateSchema() should sanitize request body by removing unknown fields" time="0.002">
    </testcase>
    <testcase classname="Validation Middleware - Comprehensive Tests Auth validators" name="loginSchema should validate properly" time="0.003">
    </testcase>
    <testcase classname="Validation Middleware - Comprehensive Tests Auth validators" name="resetRequestSchema should validate properly" time="0.001">
    </testcase>
    <testcase classname="Validation Middleware - Comprehensive Tests Auth validators" name="resetPasswordSchema should validate properly" time="0.001">
    </testcase>
    <testcase classname="Validation Middleware - Comprehensive Tests Auth validators" name="cambioPasswordSchema should validate properly" time="0.001">
    </testcase>
    <testcase classname="Validation Middleware - Comprehensive Tests Document validators" name="createDocumentValidator array should have the correct structure" time="0.001">
    </testcase>
    <testcase classname="Validation Middleware - Comprehensive Tests Document validators" name="updateDocumentValidator array should have the correct structure" time="0.001">
    </testcase>
    <testcase classname="Validation Middleware - Comprehensive Tests Document validators" name="updateStatusValidator array should have the correct structure" time="0.001">
    </testcase>
    <testcase classname="Validation Middleware - Comprehensive Tests Document validators" name="deriveDocumentValidator array should have the correct structure" time="0">
    </testcase>
    <testcase classname="Validation Middleware - Comprehensive Tests Permiso validators" name="permisoContextualSchema should validate properly" time="0.002">
    </testcase>
    <testcase classname="Validation Middleware - Comprehensive Tests Permiso validators" name="permisoEspecialSchema should validate properly" time="0.003">
    </testcase>
    <testcase classname="Validation Middleware - Comprehensive Tests Permiso validators" name="verificarPermisoSchema should validate properly" time="0.001">
    </testcase>
    <testcase classname="Validation Middleware - Comprehensive Tests Middleware de validación" name="validateSchema debe manejar múltiples errores de validación" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="API de Permisos" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="2.335" tests="5">
    <testcase classname="API de Permisos" name="Debería obtener los bits de permisos" time="0.06">
    </testcase>
    <testcase classname="API de Permisos" name="Debería verificar un permiso por bit" time="0.028">
    </testcase>
    <testcase classname="API de Permisos" name="Debería obtener todos los permisos contextuales" time="0.033">
    </testcase>
    <testcase classname="API de Permisos" name="Debería obtener información completa de permisos para frontend" time="0.017">
    </testcase>
    <testcase classname="API de Permisos" name="Debería devolver error 404 si el usuario no existe" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="Document API" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:22" time="4.097" tests="12">
    <testcase classname="Document API POST /api/documents" name="should create a new document when valid data is provided" time="0.001">
    </testcase>
    <testcase classname="Document API POST /api/documents" name="should return 400 when required data is missing" time="0">
    </testcase>
    <testcase classname="Document API GET /api/documents" name="should return a list of documents" time="0.001">
    </testcase>
    <testcase classname="Document API GET /api/documents" name="should filter documents by estado parameter" time="0">
    </testcase>
    <testcase classname="Document API GET /api/documents/:id" name="should return a document when valid ID is provided" time="0">
    </testcase>
    <testcase classname="Document API GET /api/documents/:id" name="should return 404 when document does not exist" time="0">
    </testcase>
    <testcase classname="Document API PUT /api/documents/:id" name="should update a document when valid data is provided" time="0">
    </testcase>
    <testcase classname="Document API PATCH /api/documents/:id/status" name="should update document status when valid data is provided" time="0">
    </testcase>
    <testcase classname="Document API PATCH /api/documents/:id/status" name="should return 400 when invalid status is provided" time="0">
    </testcase>
    <testcase classname="Document API GET /api/documents/:id/history" name="should return document history" time="0">
    </testcase>
    <testcase classname="Document API POST /api/documents/:id/derive" name="should derive a document to another area" time="0">
    </testcase>
    <testcase classname="Document API DELETE /api/documents/:id" name="should delete a document if it has no dependencies" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Security Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:24" time="2.479" tests="11">
    <testcase classname="Security Middleware Module Exports" name="should export rateLimitMiddleware with all required limiters" time="0.005">
    </testcase>
    <testcase classname="Security Middleware Rate Limit Middleware Standard Rate Limiter" name="should allow requests within standard limit" time="0.805">
    </testcase>
    <testcase classname="Security Middleware Rate Limit Middleware Standard Rate Limiter" name="should use the exported standardLimiter correctly" time="0.443">
    </testcase>
    <testcase classname="Security Middleware Rate Limit Middleware Auth Rate Limiter" name="should allow requests within auth limit" time="0.045">
    </testcase>
    <testcase classname="Security Middleware Rate Limit Middleware Auth Rate Limiter" name="should use the exported authLimiter correctly" time="0.047">
    </testcase>
    <testcase classname="Security Middleware Rate Limit Middleware Password Reset Rate Limiter" name="should allow requests within password reset limit" time="0.021">
    </testcase>
    <testcase classname="Security Middleware Rate Limit Middleware Password Reset Rate Limiter" name="should use the exported passwordResetLimiter correctly" time="0.017">
    </testcase>
    <testcase classname="Security Middleware Rate Limit Middleware" name="should include rate limit headers in response" time="0.005">
    </testcase>
    <testcase classname="Security Middleware Rate Limit Middleware" name="should handle concurrent requests correctly" time="0.041">
    </testcase>
    <testcase classname="Security Middleware Rate Limit Middleware" name="should reset rate limit after window expires" time="0.333">
    </testcase>
    <testcase classname="Security Middleware Rate Limit Middleware" name="should apply different rate limits to different routes" time="0.354">
    </testcase>
  </testsuite>
  <testsuite name="Pruebas de Estructura Básica" errors="0" failures="0" skipped="0" timestamp="2025-03-27T20:11:23" time="3.754" tests="3">
    <testcase classname="Pruebas de Estructura Básica" name="La aplicación Express está definida" time="0.001">
    </testcase>
    <testcase classname="Pruebas de Estructura Básica" name="La conexión a la base de datos está definida" time="0">
    </testcase>
    <testcase classname="Pruebas de Estructura Básica" name="El logger está definido" time="0">
    </testcase>
  </testsuite>
</testsuites>