<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="92" failures="0" errors="0" time="2.926">
  <testsuite name="Area Controller" errors="0" failures="0" skipped="0" timestamp="2025-03-24T02:42:18" time="0.419" tests="6">
    <testcase classname="Area Controller getAllAreas" name="should get all areas with pagination and return 200 status" time="0.006">
    </testcase>
    <testcase classname="Area Controller getAllAreas" name="should handle database errors and return 500 status" time="0.022">
    </testcase>
    <testcase classname="Area Controller getAreaById" name="should get an area by id and return 200 status" time="0.002">
    </testcase>
    <testcase classname="Area Controller getAreaById" name="should return 404 if area not found" time="0.002">
    </testcase>
    <testcase classname="Area Controller getAreaById" name="should return 400 for invalid id" time="0.001">
    </testcase>
    <testcase classname="Area Controller getAreaById" name="should handle database errors and return 500 status" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Auth Controller" errors="0" failures="0" skipped="0" timestamp="2025-03-24T02:42:18" time="0.713" tests="8">
    <testcase classname="Auth Controller login" name="debe devolver error 400 si faltan credenciales" time="0.002">
    </testcase>
    <testcase classname="Auth Controller login" name="debe devolver token válido en caso de login exitoso" time="0">
    </testcase>
    <testcase classname="Auth Controller login" name="debe manejar errores de autenticación" time="0.036">
    </testcase>
    <testcase classname="Auth Controller refreshToken" name="debe rechazar peticiones sin token de refresco" time="0.001">
    </testcase>
    <testcase classname="Auth Controller refreshToken" name="debe refrescar tokens cuando se proporciona un refreshToken válido" time="0.001">
    </testcase>
    <testcase classname="Auth Controller refreshToken" name="debe manejar errores en la actualización del token" time="0.001">
    </testcase>
    <testcase classname="Auth Controller logout" name="debe procesar el logout correctamente" time="0.003">
    </testcase>
    <testcase classname="Auth Controller logout" name="debe manejar errores durante el logout" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Auth Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-24T02:42:19" time="0.314" tests="12">
    <testcase classname="Auth Middleware authMiddleware" name="debe permitir rutas públicas sin verificar token" time="0.004">
    </testcase>
    <testcase classname="Auth Middleware authMiddleware" name="debe permitir rutas de autenticación sin verificar token" time="0.003">
    </testcase>
    <testcase classname="Auth Middleware authMiddleware" name="debe rechazar peticiones sin token" time="0.002">
    </testcase>
    <testcase classname="Auth Middleware authMiddleware" name="debe rechazar peticiones con formato de token incorrecto" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware authMiddleware" name="debe aceptar peticiones con token válido" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware authMiddleware" name="debe rechazar peticiones con token inválido" time="0">
    </testcase>
    <testcase classname="Auth Middleware checkRole" name="debe permitir acceso a usuarios con el rol correcto" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware checkRole" name="debe rechazar acceso a usuarios sin el rol requerido" time="0.002">
    </testcase>
    <testcase classname="Auth Middleware checkRole" name="debe manejar peticiones sin información de usuario" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware checkPermissions" name="debe permitir acceso a usuarios con los permisos requeridos" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware checkPermissions" name="debe rechazar acceso a usuarios sin los permisos requeridos" time="0.001">
    </testcase>
    <testcase classname="Auth Middleware checkPermissions" name="debe manejar peticiones sin información de usuario" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Database Helpers" errors="0" failures="0" skipped="0" timestamp="2025-03-24T02:42:19" time="0.219" tests="7">
    <testcase classname="Database Helpers hashPassword" name="debe hashear una contraseña correctamente" time="0.001">
    </testcase>
    <testcase classname="Database Helpers hashPassword" name="debe manejar contraseñas vacías" time="0">
    </testcase>
    <testcase classname="Database Helpers verifyPassword" name="debe verificar una contraseña correcta" time="0.001">
    </testcase>
    <testcase classname="Database Helpers verifyPassword" name="debe rechazar una contraseña incorrecta" time="0">
    </testcase>
    <testcase classname="Database Helpers getDefaultRoles" name="debe devolver un array con los roles predeterminados" time="0.009">
    </testcase>
    <testcase classname="Database Helpers getDefaultAreas" name="debe devolver un array con las áreas predeterminadas" time="0.002">
    </testcase>
    <testcase classname="Database Helpers getDefaultPermissions" name="debe devolver un array con los permisos predeterminados" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Document Controller" errors="0" failures="0" skipped="0" timestamp="2025-03-24T02:42:19" time="0.141" tests="3">
    <testcase classname="Document Controller getAllDocuments" name="should get all documents with default pagination" time="0.002">
    </testcase>
    <testcase classname="Document Controller getAllDocuments" name="should apply filters when provided in query params" time="0.001">
    </testcase>
    <testcase classname="Document Controller getAllDocuments" name="should handle database errors" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="Error Handler Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-24T02:42:20" time="0.099" tests="18">
    <testcase classname="Error Handler Middleware Main Error Handler" name="debe manejar errores generales con código de estado personalizado" time="0.004">
    </testcase>
    <testcase classname="Error Handler Middleware Main Error Handler" name="debe usar código 500 para errores sin código de estado" time="0">
    </testcase>
    <testcase classname="Error Handler Middleware Main Error Handler" name="debe incluir stack trace en modo desarrollo" time="0">
    </testcase>
    <testcase classname="Error Handler Middleware Validation Error Handler" name="debe manejar errores de validación" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware Validation Error Handler" name="debe pasar el error al siguiente middleware si no es un error de validación" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware Auth Error Handler" name="debe manejar errores de autenticación" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware Auth Error Handler" name="debe pasar el error al siguiente middleware si no es un error de autenticación" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware DB Error Handler" name="debe manejar errores de duplicación de base de datos" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware DB Error Handler" name="debe manejar errores de referencia inválida" time="0">
    </testcase>
    <testcase classname="Error Handler Middleware DB Error Handler" name="debe manejar errores de campos requeridos" time="0">
    </testcase>
    <testcase classname="Error Handler Middleware DB Error Handler" name="debe pasar el error al siguiente middleware si no es un error de base de datos" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware File Error Handler" name="debe manejar errores de archivo no encontrado" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware File Error Handler" name="debe manejar errores de permiso denegado" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware File Error Handler" name="debe pasar el error al siguiente middleware si no es un error de archivo" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware Joi Error Handler" name="debe manejar errores de validación de Joi" time="0.002">
    </testcase>
    <testcase classname="Error Handler Middleware Joi Error Handler" name="debe pasar el error al siguiente middleware si no es un error de Joi" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware JSON Syntax Error Handler" name="debe manejar errores de sintaxis JSON" time="0.001">
    </testcase>
    <testcase classname="Error Handler Middleware JSON Syntax Error Handler" name="debe pasar el error al siguiente middleware si no es un error de sintaxis JSON" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Logger Module" errors="0" failures="0" skipped="0" timestamp="2025-03-24T02:42:20" time="0.071" tests="4">
    <testcase classname="Logger Module" name="debe crear un logger con configuración por defecto" time="0.002">
    </testcase>
    <testcase classname="Logger Module" name="debe usar el nivel de log especificado en LOG_LEVEL" time="0.001">
    </testcase>
    <testcase classname="Logger Module" name="debe agregar transporte de archivo si LOG_FILE está definido" time="0">
    </testcase>
    <testcase classname="Logger Module" name="los métodos del logger deben funcionar correctamente" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Security Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-24T02:42:20" time="0.073" tests="5">
    <testcase classname="Security Middleware sanitizeData" name="should sanitize malicious scripts in request body" time="0.002">
    </testcase>
    <testcase classname="Security Middleware sanitizeData" name="should sanitize malicious scripts in query parameters" time="0.001">
    </testcase>
    <testcase classname="Security Middleware sanitizeData" name="should sanitize nested objects in body" time="0">
    </testcase>
    <testcase classname="Security Middleware validateHeaders" name="should add security headers to response" time="0.001">
    </testcase>
    <testcase classname="Security Middleware validateHeaders" name="should return 400 status for invalid content type" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Session Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-24T02:42:20" time="0.086" tests="13">
    <testcase classname="Session Middleware validateSession" name="debe permitir el acceso cuando la sesión es válida" time="0.001">
    </testcase>
    <testcase classname="Session Middleware validateSession" name="debe retornar 401 cuando no hay sesión" time="0.001">
    </testcase>
    <testcase classname="Session Middleware validateSession" name="debe retornar 401 cuando no hay usuario en la sesión" time="0.001">
    </testcase>
    <testcase classname="Session Middleware validateSession" name="debe retornar 401 cuando la sesión no se encuentra en Redis" time="0.001">
    </testcase>
    <testcase classname="Session Middleware validateSession" name="debe manejar errores al verificar sesión" time="0.001">
    </testcase>
    <testcase classname="Session Middleware regenerateSession" name="debe regenerar la sesión correctamente" time="0.001">
    </testcase>
    <testcase classname="Session Middleware regenerateSession" name="debe pasar al siguiente middleware si no hay método regenerate" time="0.001">
    </testcase>
    <testcase classname="Session Middleware regenerateSession" name="debe manejar errores durante la regeneración" time="0">
    </testcase>
    <testcase classname="Session Middleware regenerateSession" name="debe pasar al siguiente middleware si hay un error general" time="0">
    </testcase>
    <testcase classname="Session Middleware clearSession" name="debe limpiar la sesión correctamente" time="0.007">
    </testcase>
    <testcase classname="Session Middleware clearSession" name="debe pasar al siguiente middleware si no hay sesión" time="0.001">
    </testcase>
    <testcase classname="Session Middleware clearSession" name="debe manejar errores durante la limpieza" time="0.001">
    </testcase>
    <testcase classname="Session Middleware clearSession" name="debe pasar al siguiente middleware si hay un error general" time="0">
    </testcase>
  </testsuite>
  <testsuite name="User Controller" errors="0" failures="0" skipped="0" timestamp="2025-03-24T02:42:20" time="0.079" tests="11">
    <testcase classname="User Controller getAllUsers" name="should get all users with default pagination" time="0.002">
    </testcase>
    <testcase classname="User Controller getAllUsers" name="should apply search filters when provided" time="0.001">
    </testcase>
    <testcase classname="User Controller getAllUsers" name="should handle database errors" time="0.001">
    </testcase>
    <testcase classname="User Controller getUserById" name="should get a user by id and return 200 status" time="0.001">
    </testcase>
    <testcase classname="User Controller getUserById" name="should return 404 if user not found" time="0.001">
    </testcase>
    <testcase classname="User Controller getUserById" name="should return 400 for invalid id" time="0.001">
    </testcase>
    <testcase classname="User Controller getUserById" name="should handle database errors" time="0.001">
    </testcase>
    <testcase classname="User Controller createUser" name="should create a new user and return 201 status" time="0.001">
    </testcase>
    <testcase classname="User Controller createUser" name="should return 400 when missing required fields" time="0.001">
    </testcase>
    <testcase classname="User Controller createUser" name="should return 409 when user already exists" time="0.001">
    </testcase>
    <testcase classname="User Controller createUser" name="should handle database errors" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Validation Middleware" errors="0" failures="0" skipped="0" timestamp="2025-03-24T02:42:20" time="0.421" tests="5">
    <testcase classname="Validation Middleware validate (Express Validator)" name="should call next() when validation passes" time="0.009">
    </testcase>
    <testcase classname="Validation Middleware validate (Express Validator)" name="should return 400 with error messages when validation fails" time="0.005">
    </testcase>
    <testcase classname="Validation Middleware validateSchema (Joi)" name="should call next() when validation passes" time="0.005">
    </testcase>
    <testcase classname="Validation Middleware validateSchema (Joi)" name="should return 400 with error messages when validation fails" time="0.002">
    </testcase>
    <testcase classname="Validation Middleware validateSchema (Joi)" name="should sanitize data by removing unknown fields" time="0.002">
    </testcase>
  </testsuite>
</testsuites>